[{"path":"https://epiverse-trace.github.io/cleanepi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 readepi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"an-overview","dir":"Articles","previous_headings":"","what":"An overview","title":"cleanepi","text":"Data cleaning critical step data analysis, especially considering messy nature real-world data, often includes duplicates, errors, incomplete entries, irrelevant formats. Addressing issues essential producing accurate, reliable, reproducible results. However, data cleaning can pose substantial barrier data analysis due time-consuming nature process. {cleanepi} R package designed specifically address challenge offering tools clean, curate, standardize datasets. Tailored specifically epidemiological data compatible data frame-like structures, {cleanepi} offers suite functions designed streamline common data cleaning tasks. vignette provides comprehensive guide functionalities encapsulated within {cleanepi}. provides users detailed insights function’s purpose practical usage, equipping tools necessary navigate manipulate cluttered datasets effectively.","code":"library(\"cleanepi\")"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"general-data-cleaning-tasks","dir":"Articles","previous_headings":"","what":"General data cleaning tasks","title":"cleanepi","text":"main function {cleanepi} clean_data() can perform following tasks: Scan input data determine percent missing, numeric, character, logical date values every column input data frame. Clean column names convert sensible formats. includes many sub-tasks changing space, dot, hyphen two words underscore; converting camel-cases snake-cases; substituting foreign characters corresponding English characters; splitting long word multiple short words capital characters within, , connecting underscores. Remove duplicated rows across columns specific columns. also includes removal empty rows columns well constant columns, .e. columns value across rows. Replace missing entries NA. Check whether sequence date events correct rows input data. Convert character columns Date column actually contains values type Date extent (default 50% values Date). Detect remove rows subject IDs comply expected format. Perform dictionary-based cleaning: replace keys specific columns corresponding values stored data dictionary file, replace misspelled values correct ones. Convert numbers written characters numeric. {cleanepi}, every cleaning operation encapsulated within module, detailed descriptions provided package design vignette. module also specifies parameters required main function, outlined sections . following chunk, define list cleaning operations want perform input data. clean_data() requires 2 arguments: data: data.frame linelist. params: list parameters define cleaning operations performed. returns cleaned dataset. report generated data cleaning operations list object attached cleaned data can accessed using attr() function, shown . report automatically printed , contains details cleaning operation performed successfully. However, users can access report using code : report can also displayed HTML format using print_report() function shown :","code":"# IMPORTING THE TEST DATASET test_data <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                                  package = \"cleanepi\")) # SCAN THE DATA scan_result <- scan_data(test_data) # PARAMETERS FOR REPLACING MISSING VALUES WITH NA rm_na <- list(target_columns = NULL, na_strings = \"-99\")  # PARAMETERS FOR DUBLICATES DETECTION AND REMOVAL rm_dup <- list(target_columns   = NULL,                rm_empty_rows    = TRUE,                rm_empty_cols    = TRUE,                rm_constant_cols = TRUE)  # PARAMETERS FOR STANDARDING DATES stdn_date <- list(target_columns  = NULL,                   error_tolerance = 0.5,                   format          = NULL,                   timeframe       = as.Date(c(\"1973-05-29\", \"2023-05-29\")))  # PARAMETERS FOR STANDARDING SUBJECT IDs stdn_ids <- list(id_col_name = \"study_id\",                  format      = NULL,                  prefix      = \"PS\",                  suffix      = \"P2\",                  range       = c(1, 100))  # LAOD THE DATA DICTIONARY test_dictionary <- readRDS(system.file(\"extdata\", \"test_dictionary.RDS\",                                        package = \"cleanepi\"))  # DEFINE THE LIST OF PARAMETERS params <- list(   replace_missing_values  = rm_na,   remove_duplicates       = rm_dup,   standardize_date        = stdn_date,   standardize_subject_ids = stdn_ids,   dictionary              = test_dictionary ) # CLEAN THE INPUT DATA FRAME cleaned_data <- clean_data(   data   = test_data,   params = params )  cleaning column names replacing missing values with NA removing duplicated rows standardising date columns checking subject IDs format performing dictionary-based cleaning # ACCESS THE DATA CLEANING REPORT report <- attr(cleaned_data, \"report\")  # SUMMARIZE THE REPORT OBJECT summary(report) #>                            Length Class      Mode      #> colnames                   2      data.frame list      #> missing_values_replaced_at 1      -none-     character #> out_of_range_dates         3      data.frame list      #> incorrect_subject_id       2      data.frame list print_report(report)"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"specific-data-cleaning-tasks","dir":"Articles","previous_headings":"","what":"Specific data cleaning tasks","title":"cleanepi","text":"Certain data cleaning operations automatically applied input data. operations include renaming columns, removing empty rows columns, removing columns values across rows, standardizing date columns. refer operation implicit data cleaning steps, executed default. However, also provide users flexibility call specific function wish perform particular task individually. approach allows users control data cleaning process apply additional data cleaning functions needed. setup offers users convenience flexibility, can benefit default data cleaning operations also option customize data cleaning process according specific needs.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"standardizing-dates","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Standardizing Dates","title":"cleanepi","text":"standardize_dates() function provides comprehensive set options converting date columns specified format handling various scenarios, different date formats mixed data types column. default date format R %Y-%m-%d (ISO format). However, common encounter date values written differently . Also, cases column data frame contains values type Date, character others. standardize_dates() function offers possibility convert date columns %Y-%m-%d format convert character columns Date percentage date values reach specified threshold. function needs following arguments: data: data frame linelist (required). target_columns: vector names columns converted (optional). provided, function attempt detect date columns perform conversion needed. format: format values specified columns (optional). provided, function attempt infer format. timeframe: expected time frame within date values fall. Values outside range set NA (optional). error_tolerance: minimum percentage values type Date character column needed convert Date column. Default 50% .e. 0.5. ⚠️ error_tolerance must used caution. set, percentage date values character column less threshold, column returned . function provides users flexibility standardize date columns dataset according specified requirements, including format, timeframe, error tolerance conversion character date columns. function returns input dataset (specified) columns converted date condition met.","code":"# STANDARDISE VALUES IN THE 'date_first_pcr_positive_test' COLUMN test_data <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                                  package = \"cleanepi\"))  head(test_data$date_first_pcr_positive_test) date_standardisation [1] \"Dec 01, 2020\" \"Jan 01, 2021\" \"Feb 11, 2021\" \"Feb 01, 2021\" \"Feb 16, 2021\" date_standardisation [6] \"May 02, 2021\"  res <- standardize_dates(   data            = test_data,   target_columns  = \"date_first_pcr_positive_test\",   format          = NULL,   timeframe       = NULL,   error_tolerance = 0.5 )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"standardizing-subject-ids","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Standardizing subject IDs","title":"cleanepi","text":"check_subject_ids() function designed identify eliminate rows input dataset don’t comply expected format subject IDs. requires following parameters: data: data frame linelist (required). id_column_name: name column containing subject IDs dataset (required). format: expected format subject IDs. function use format validate IDs (optional). prefix: string. subject IDs specified prefix, used value argument. optional can omitted prefix. suffix: string. subject IDs specified suffix, used value argument. can ignored otherwise. range: vector two elements. expected range numbers within subject IDs, define using parameter. optional can omitted specific range. providing parameters, function becomes versatile tool data cleaning, ensuring rows subject IDs adhering expected format retained dataset. using function, make sure tailor parameters according specific requirements dataset expected characteristics subject IDs. check_subject_ids() function returns input dataset subset subset input data rows incorrect IDs removed. addition detecting wrong subject IDs, function also look missing duplicated IDs. result , report made operation might contain two extra elements: missing_ids (vector row indexes missing IDs) duplicated_ids (data frame rows duplicated IDs). Use print_report() function display report made operation.","code":"# DETECT AND REMOVE INCORRECT SUBJECT IDs res <- check_subject_ids(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   id_column_name = \"study_id\",   format         = \"PS000P2\",   prefix         = \"PS\",   suffix         = \"P2\",   range          = c(1L, 100L) )  # EXTRACT REPORT report <- attr(res, \"report\")  # SUMMARIZE THE REPORT OBJECT summary(report) subject_ids_standaedisation                      Length Class      Mode subject_ids_standaedisation incorrect_subject_id 2      data.frame list"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"checking-date-sequence","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Checking date sequence","title":"cleanepi","text":"check_date_sequence() function verifies order sequences date event columns within dataset. ensures values specified date columns follow desired chronological order. arguments accepted function: data: data frame linelist (required). target_columns: vector containing names date columns interest. columns listed expected order occurrence, reflecting chronological sequence events. example, target_columns = c(\"date_of_infection\", \"date_of_admission\", \"date_of_death\"). remove_bad_seq: Boolean variable default value FALSE. set TRUE, rows incorrect date sequences removed output object. Otherwise, flagged erroneous stored report object. utilizing arguments, check_date_sequence() function facilitates validation date sequences within dataset, ensuring data integrity accuracy analysis. Additionally, offers flexibility allowing users choose whether remove rows incorrect sequences store examination report object. check_date_sequence() function returns input dataset subset without rows incorrect date sequences, depending whether remove_bad_seq parameter set TRUE. also provides detailed report highlighting discrepancies found date sequences, enabling users take appropriate actions. Use print_report() function display report made operation.","code":"# DETECT ROWS WITH INCORRECT DATE SEQUENCE res <- check_date_sequence(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = c(\"date_first_pcr_positive_test\", \"date.of.admission\"),   remove_bad_seq = FALSE ) check_date_order Warning: Detected 2 incorrect date sequences at line(s): 6, 8  # EXTRACT THE REPORT report <- attr(res, \"report\")  # SUMMARIZE THE REPORT OBJECT summary(report) check_date_order                         Length Class      Mode check_date_order incorrect_date_sequence 2      data.table list"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"finding-duplicated-rows","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Finding duplicated rows","title":"cleanepi","text":"find_duplicates() function serves purpose identifying duplicated rows within given dataset. accepts following parameters: data: input data frame linelist. target_columns: vector containing either column names indexes duplicated rows identified. NULL passed, duplicates detected across columns dataset. Notably, input dataset linelist object, target_columns can set tags specifically identify duplicates across tagged variables . leveraging find_duplicates() function appropriate parameters, users can efficiently pinpoint duplicated rows within datasets, either across columns selectively across tagged variables linelist object. Upon execution, find_duplicates() function identifies duplicated rows either based columns specified, stores report. addition existing columns, appends two extra columns dataset: row_id: Contains indexes duplicated rows original input dataset. group_id: Contains unique identifiers assigned duplicated group, defined set rows sharing identical values designated columns interest. including extra columns, users gain insights specific rows identified duplicates corresponding group identifiers, enabling efficient analysis management duplicated data within dataset.","code":"# IMPORT A `linelist` DATA data <- readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                             package = \"cleanepi\"))  # SHOW THE TAGGED VARIABLES linelist::tags(data) $date_onset [1] \"dt_onset\"  $date_reporting [1] \"dt_report\"  $gender [1] \"sex\"  $outcome [1] \"outcome\"  # FIND DUPLICATES ACROSS ALL COLUMNS EXCEPT THE SUBJECT IDs COLUMN all_columns    <- names(data) target_columns <- all_columns[all_columns != \"id\"] dups           <- find_duplicates(data           = data,                                   target_columns = target_columns)  # FIND DUPLICATES ACROSS TAGGED VARIABLES dups <- find_duplicates(   data           = data,   target_columns = \"linelist_tags\" ) Found 57 duplicated rows. Please consult the report for more details. # VISUALIZE THE DUPLICATES report     <- attr(dups, \"report\") duplicates <- report$duplicated_rows duplicates |>   rlang::set_names(toupper) |>   kableExtra::kbl() |>   kableExtra::kable_paper(\"striped\", font_size = 18, full_width = TRUE) |>   kableExtra::scroll_box(height = \"200px\", width = \"100%\",                          box_css = \"border: 1px solid #ddd; padding: 5px; \",                          extra_css = NULL,                          fixed_thead = TRUE)"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"removing-duplicates","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Removing duplicates","title":"cleanepi","text":"eliminate duplicated rows dataset, remove_duplicates() function can employed. function internally utilizes find_duplicates() function expects following parameters: data: data frame input dataset duplicated rows removed. target_columns: vector containing either column names indexes specifying columns duplicated rows identified. set NULL, function detect duplicates across columns. input dataset linelist object, setting parameter tags identify duplicates across tagged variables . remove: numeric vector indices duplicated rows removed. set NULL, function removes duplicates retains first occurrence duplicated rows. rm_empty_rows: Boolean indicate whether remove empty rows . default TRUE rm_empty_cols: Boolean indicate whether remove empty columns . default TRUE rm_constant_cols: Boolean indicate whether remove constant columns . default TRUE Upon execution, remove_duplicates() function returns input dataset duplicated rows removed (found). details duplicates removal operation reported list attached output object. duplicates found, report contain following elements: empty_columns: vector empty columns (found). constant_columns: vector constant columns (found). duplicated_rows: data frame detected duplicates. removed_duplicates: data frame duplicated rows removed. duplicates_checked_from: vector names columns duplicates identified. examining elements within report, users gain insights specific duplicated rows, removed, columns used identify duplicated, thus facilitating transparency documentation duplicates removal process. Use print_report() function display report made operation output find_duplicates() function can also passed remove_duplicates() function specify duplicated rows removed.","code":"# REMOVE DUPLICATE ACROSS TAGGED COLUMNS ONLY. res <- remove_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = NULL,   remove         = NULL ) # ACCESS THE REPORT report <- attr(res, \"report\")  # SUMMARIZE THE REPORT OBJECT summary(report) Length  Class   Mode       0   NULL   NULL # DETECT DUPLICATES FROM TAGGED COLUMNS dups <- find_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = \"linelist_tags\" ) find_and_remove_dups Found 57 duplicated rows. Please consult the report for more details.  # EXTRACT THE DUPLICATES report     <- attr(dups, \"report\") duplicates <- report$duplicated_rows  # REMOVE FIRST OCCURRENCE OF DUPLICATED ROWS dups_index_to_remove <- duplicates[[\"row_id\"]][seq(1L, nrow(dups), 2L)] dups_index_to_remove <- dups_index_to_remove[!is.na(dups_index_to_remove)] no_dups <- remove_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = \"linelist_tags\",   remove         = dups_index_to_remove ) find_and_remove_dups Found 57 duplicated rows. Please consult the report for more details.  # KEEP SPECIFIC DUPLICATED ROWS no_dups <- remove_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = \"linelist_tags\",   remove         = -c(33, 55) ) find_and_remove_dups Found 57 duplicated rows. Please consult the report for more details."},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"dictionary-based-data-substituting","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Dictionary based data substituting","title":"cleanepi","text":"clean_using_dictionary() function offers convenient way replace options data frame linelist corresponding values stored data dictionary file. function expects following arguments: data: input data frame linelist contains options replaced. dictionary: data frame data dictionary contains complete labels options. structure data dictionary file adhere standards expected matchmaker package, clean_using_dictionary() function relies functions package. add_to_dictionary() function useful tool expanding coverage data dictionary defining options present input data originally included dictionary. function enables users dynamically update dictionary accommodate new values encountered dataset. addition current data dictionary function takes arguments defined : option, value, grp, order: values options added data dictionary. example shows function used. employing add_to_dictionary() function, users can ensure data dictionary remains comprehensive aligned evolving nature input dataset, thereby enhancing accuracy completeness data interpretation analysis. example , add -99 test data dictionary, test_dictionary.","code":"# READING IN THE DATA data <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                             package = \"cleanepi\"))  # ADD THE EXTRA OPTION TO THE DICTIONARY test_dictionary <- add_to_dictionary(test_dictionary,                                       option = \"-99\",                                       value  = \"unknow\",                                       grp    = \"sex\",                                       order  = NULL) cleaned_df <- clean_using_dictionary(   data       = data,   dictionary = test_dictionary )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"calculating-age-in-different-time-scales","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Calculating age in different time scales","title":"cleanepi","text":"calculate_age() function computes ages individuals, expressed years, months, weeks, days, based given date column reference date. requires following arguments: data: input dataset (required). target_column: vector name column containing birth relevant dates age calculated (required). end_date: reference date used calculate age individuals (required). function computes age relative date. age_in: parameter determines unit age expressed (required). can specified “years”, “months”, “weeks”, “days”. default, age calculated years parameter provided. na_strings: extra parameters needed missing values date column interest. used replace missing values NA prior age calculation. arguments, function offers flexibility determining age individuals based different units reference dates. facilitates various analytics tasks age computation necessary component, providing users ability customize output according specific requirements. calculate_age() function augments input dataset adding one two extra columns containing age-related information. additional columns follows: Calculated age specified scale: Contains calculated age individuals expressed specified unit (years, months, weeks, days). Remaining number days: Indicates remaining number days calculating age, representing fractional part age calculation. column included needed, provides additional granularity age representation.","code":"# CALCULATE INDIVIDUAL AGE FROM THE 'dateOfBirth' COLUMN age <- calculate_age(   data          = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                       package = \"cleanepi\")),   target_column = \"dateOfBirth\",   age_in        = \"days\",   na_strings    = \"-99\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"printing-the-report","dir":"Articles","previous_headings":"","what":"Printing the report","title":"cleanepi","text":"","code":"print_report(   data             = data,   report_title     = \"{cleanepi} data cleaning report\",   output_directory = \".\",   output_filename  = \"template_data_report\",   format           = \"html\",   print            = TRUE )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"concept-and-motivation","dir":"Articles","previous_headings":"","what":"Concept and motivation","title":"Package Design vignette for {cleanepi}","text":"document, outline design decisions steered development strategies {cleanepi} R package, along rationale behind decision potential advantages disadvantages associated . Data cleaning important phase ensuring efficacy downstream analysis. procedures entailed cleaning process may differ based data type research objectives. Nonetheless, certain steps can applied universally across diverse data types, irrespective origin.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"design-decisions","dir":"Articles","previous_headings":"","what":"Design decisions","title":"Package Design vignette for {cleanepi}","text":"{cleanepi} R package designed offer functional programming-style data cleansing tasks. streamline organization data cleaning operations, categorized distinct groups referred modules. modules based overarching goals derived commonly anticipated data cleaning procedures. module features primary function along additional helper functions tailored accomplish specific tasks. ’s important note main function module exported. deliberate choice empowers users execute individual cleaning tasks needed, enhancing flexibility usability.  core {cleanepi}, pivotal function clean_data() serves wrapper encapsulating modules, illustrated Figure @fig:1. function intended primary entry point users seeking cleanse data. categorized cleaning actions two main types: implicit explicit. Implicit actions executed default, regardless user specifications; explicit actions performed upon user request. addition, package also two surrogate functions: scan_data(): function enables users assess data types present column dataset. print_report(): utilizing function, users can visualize report generated applied cleaning task, facilitating transparency understanding data cleaning process.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Package Design vignette for {cleanepi}","text":"{cleanepi} R package crafted clean, curate, standardize tabular datasets, particular focus epidemiological data. architecture {cleanepi}, data cleaning operations categorized modules, provides specific data cleaning task. modules current version {cleanepi} encompass: Standardization column names Removal duplicates Replacement missing values NA Standardization subject IDs Standardization date values Replacement existing values predefined ones (dictionary based substitutions) Conversion values necessary Verification sequence order date-events Transformation select columns. compartmentalizing operations modules, {cleanepi} offers users systematic adaptable framework address diverse data cleaning needs, especially within realm epidemiological datasets.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Package Design vignette for {cleanepi}","text":"primary functions modules, well core function clean_data, accept input form data.frame linelist. offers flexibility users regarding want position {ceanepi} within R package ecosystem epidemic analysis pipelines, either clean data converting linelist. addition target dataset, core function clean_data() accepts list operations executed dataset. subsequently invokes primary functions specified module.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Package Design vignette for {cleanepi}","text":"primary functions modules core function clean_data return object type data.frame linelist. report generated cleaning tasks appended data.frame attribute, can accessed using attr() function base R.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"modules-in-cleanepi","dir":"Articles","previous_headings":"Output","what":"Modules in {cleanepi}","title":"Package Design vignette for {cleanepi}","text":"section, provide detailed description way every module built. 1. Standardization column names module designed standardize style format column names within target dataset, offering users flexibility specify subset focal columns preserve original format. Main function: standardize_column_names() data.frame linelist object. Optionally, vector focal column names. provided, columns undergo standardization. input object standardized column names. two-column table displaying initial current column names updated column original dataset. Implicit. incorporating standardize_column_names() function, {cleanepi} streamlines process ensuring consistency clarity column naming conventions, thereby enhancing overall organization readability dataset. 2. Removal duplicates module designed identify eliminate duplicate rows, columns, constant columns within dataset. Main function: remove_duplicates() Vector target columns (default consider columns) Option remove empty rows (rows default) Option remove empty columns (columns default) Option remove constant columns (constant columns default) Output: Returns input object applying specified operations. two-column table showcasing items values. Items include empty rows, empty columns, constant columns. table detailing removed duplicates. Mode: Operates implicitly. remove_duplicates() function, users can streamline dataset eliminating redundant rows, columns, constant values, thus enhancing data integrity analysis efficiency. 3. Replacement missing values NA module aims standardize unify representation missing values within dataset. Main function: replace_missing_char() vector column names (provided, operation performed across columns) string specifying missing values (default value null) Output: Returns input object missing values represented NA. Report: Generates three-column table featuring index, column, value missing item dataset. Mode: Operates implicitly. utilizing replace_missing_char() function, users can ensure consistency handling missing values across dataset, facilitating accurate analysis interpretation data. 4. Standardization date values module dedicated standardizing format date-value columns ensuring dates fall within specified timeframe. Main function: standardize_dates() vector targeted date columns (automatically determined provided) Tolerance threshold (default value 50%) Format (default value NULL) Timeframe (default value null) Output: Returns input object standardized date values format yyyy-mm-dd. two-column table listing columns date values standardized. three-column table featuring index, column name, values fall outside specified timeframe. Mode: Operates implicitly. employing standardize_dates() function, users can ensure uniformity coherence date formats across dataset, also validating temporal integrity data within defined timeframe. 5. Standardization subject IDs module tailored verify whether values column uniquely identifying subjects adhere consistent format. Main function: check_subject_ids() name ID column Strings prefix, suffix, numerical range within IDs Output: Returns input object standardized subject IDs. Report: Generates two-column table featuring index value subject ID deviates expected format. Mode: Operates explicitly. utilizing check_subject_ids() function, users can ensure uniformity format subject IDs, facilitating accurate tracking analysis individual subjects within dataset. 6. Dictionary based substitution module facilitates dictionary-based substitution, involves replacing existing values predefined ones. standardizes entries specific columns certain values, substituting 1 “male” 2 “female” gender column. also interoperate seamlessly get_meta_data() function {readepi} R package. Main function: clean_using_dictionary() Input: Accepts data.frame linelist object, along data dictionary featuring following column names: options, values, column, order. Output: Returns input object specified options replaced corresponding values. Report: Generates three-column table index, column, value unexpected value encountered targeted column. Mode: Operates explicitly. leveraging clean_using_dictionary() function, users can streamline standardize values within specific columns based predefined mappings, enhancing consistency accuracy dataset. Note clean_using_dictionary() function return warning detects unexpected values target columns specified data dictionary. unexpected values can added data dictionary using add_to_dictionary() function. 7. Conversion values necessary module designed convert numbers written letters numerical values, ensuring interoperability {numberize} package. Main function: convert_to_numeric() vector column names converted numeric output scan_data() function Output: Returns input object values target columns converted numeric format. Report: Generates three-column table index, column, value unrecognized value dataset (strings converted numeric). Mode: Operates explicitly. employing convert_to_numeric() function, users can seamlessly transform numeric representations written letters numerical values, ensuring compatibility {numberize} package promoting accuracy numerical analysis. Note convert_to_numeric() issue warning unexpected values return report. 8. Verification sequence date-events module provides functions verify whether sequence date events aligns expectations. instance, can flag rows date admission hospital precedes individual’s date birth. Main function: check_date_sequence() vector date column names considered logical value specify whether remove incorrect rows input data Output: Returns input object incorrect rows removed specified. Report: Generates table listing incorrect rows specified columns. Mode: Operates explicitly. using check_date_sequence() function, users can systematically validate ensure coherence date sequences within dataset, promoting accuracy reliability subsequent analyses. 9. Transformation select columns module dedicated performing various specialized operations related epidemiological data analytics, currently includes following function: Main function: calculate_age() name column interest reference date time unit (possible values days, weeks, months, years) Output: Returns input object clean data additional age column values specified time unit. Report: None. Mode: Operates explicitly. leveraging calculate_age() function, users can efficiently compute integrate age-related information epidemiological dataset based user-defined parameters, enhancing analytical capabilities dataset.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"surrogate-functions","dir":"Articles","previous_headings":"Output","what":"Surrogate functions","title":"Package Design vignette for {cleanepi}","text":"scan_data(): function designed generate quick summary dataset, offering insights composition column. calculates percentage values belonging different data types character, numeric, missing, logical, date. summary can help analysts data scientists understand structure content dataset glance. print_report(): function responsible displaying reports detailing cleaning operations executed dataset. likely presents information data cleaning processes performed, handling missing values, correcting data types, removing duplicates, transformations applied ensure data quality integrity. surrogate functions play crucial roles data analysis cleaning workflow, providing valuable information documentation dataset’s characteristics steps taken prepare analysis modeling.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Package Design vignette for {cleanepi}","text":"modules surrogate functions depend mainly following packages: {numberize}, {dplyr}, {maggritr}, {linelist}, {janitor}, {matchmaker}, {lubridate}, {epitrix}, {arsenal}, {naniar}, {glue}, {stringr}, {snakecase}, {readr}, {R.utils}. functions require packages needed package development process including: {checkmate}, {kableExtra}, {bookdown}, {rmarkdown}, {testthat} (>= 3.0.0), {knitr}, {lintr}","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"contribute","dir":"Articles","previous_headings":"","what":"Contribute","title":"Package Design vignette for {cleanepi}","text":"special requirements contributing {cleanepi}, please follow package contributing guide.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karim Mané. Author, maintainer. Thibaut Jombart. Copyright holder. Bubacarr Bah. Contributor. Bankolé Ahadzie. Contributor. Nuredin Mohammed. Contributor. Abdoelnaser Degoot. Contributor. Hugo Gruson. Reviewer. Pratik R. Gupte. Reviewer. James M. Azam. Reviewer. Joshua W. Lambert. Reviewer.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mané K (2024). cleanepi: Clean Standardize Epidemiological Data. https://epiverse-trace.github.io/cleanepi,https://github.com/epiverse-trace/cleanepi.","code":"@Manual{,   title = {cleanepi: Clean and Standardize Epidemiological Data},   author = {Karim Mané},   year = {2024},   url = {https://epiverse-trace.github.io/cleanepi, https://github.com/epiverse-trace/cleanepi}, }"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"cleanepi-clean-and-standardize-epidemiological-data-","dir":"","previous_headings":"","what":"Clean and Standardize Epidemiological Data","title":"Clean and Standardize Epidemiological Data","text":"cleanepi R package designed cleaning, curating, standardizing epidemiological data. streamlines various data cleaning tasks typically expected working datasets epidemiology. Key functionalities cleanepi include: Removing irregularities: efficiently removes duplicated empty rows columns, well columns constant values. Handling missing values: replaces missing values standard NA format, ensuring consistency ease analysis. Ensuring data integrity: ensures uniqueness uniquely identified columns, thus maintaining data integrity preventing duplicates. Date conversion: offers functionality convert character columns Date format specified conditions, enhancing data uniformity facilitating temporal analysis. Standardizing entries: can standardize column entries specified formats, promoting consistency across dataset. Age calculation: calculates age given Date column reference date, providing valuable demographic insights epidemiological analysis. cleanepi operates data frames similar structures like tibbles, well linelist objects commonly used epidemiological research. returns processed data format, ensuring seamless integration existing workflows. Additionally, generates comprehensive report detailing outcomes cleaning task. cleanepi developed Epiverse-TRACE team Medical Research Council Gambia unit London School Hygiene Tropical Medicine.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clean and Standardize Epidemiological Data","text":"latest development version cleanepi can installed GitHub.","code":"if (!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/cleanepi\") library(cleanepi)"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Clean and Standardize Epidemiological Data","text":"main function cleanepi clean_data(), internally makes call almost standard data cleaning functions, removal empty duplicated rows columns, replacement missing values, etc. However, function can also called independently perform specific task. mechanism explained details vignette. typical example use clean_data() function.","code":"# READING IN THE TEST DATASET test_data       <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")) # READING IN THE DATA DICTIONARY test_dictionary <- readRDS(system.file(\"extdata\", \"test_dictionary.RDS\",                                        package = \"cleanepi\")) # DEFINING THE CLEANING PARAMETERS use_na                  <- list(target_columns = NULL, na_strings = \"-99\") remove_duplicates       <- list(target_columns   = NULL,                                 rm_empty_rows    = TRUE,                                 rm_empty_cols    = TRUE,                                 rm_constant_cols = TRUE) standardize_date        <- list(target_columns  = NULL,                                 error_tolerance = 0.5,                                 format          = NULL,                                 timeframe       = as.Date(c(\"1973-05-29\",                                                             \"2023-05-29\"))) standardize_subject_ids <- list(id_col_name = \"study_id\",                                 format      = NULL,                                 prefix      = \"PS\",                                 suffix      = \"P2\",                                 range       = c(1, 100)) params <- list(   keep                    = NULL,   replace_missing_values  = use_na,    remove_duplicates       = remove_duplicates,   standardize_date        = standardize_date,   standardize_subject_ids = standardize_subject_ids,   to_numeric              = \"sex\",   dictionary              = test_dictionary ) # PERFORMING THE DATA CLEANING cleaned_data <- clean_data(   data   = test_data,   params = params ) #>  #> cleaning column names #> replacing missing values with NA #> removing duplicated rows #> standardising date columns #> checking subject IDs format #> converting sex into numeric #> performing dictionary-based cleaning # EXTRACT THE DATA CLEANING REPORT report <- attr(cleaned_data, \"report\") # DISPLAY THE DATA CLEANING REPORT print_report(report)"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Clean and Standardize Epidemiological Data","text":"","code":"browseVignettes(\"cleanepi\")"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"next-steps","dir":"","previous_headings":"","what":"Next steps","title":"Clean and Standardize Epidemiological Data","text":"✅ update create test files","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"lifecycle","dir":"","previous_headings":"Next steps","what":"Lifecycle","title":"Clean and Standardize Epidemiological Data","text":"package currently experimental, defined RECON software lifecycle. means functional, interfaces functionalities may change time, testing documentation may lacking.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"contributions","dir":"","previous_headings":"Next steps","what":"Contributions","title":"Clean and Standardize Epidemiological Data","text":"Contributions welcome via pull requests.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"code-of-conduct","dir":"","previous_headings":"Next steps","what":"Code of Conduct","title":"Clean and Standardize Epidemiological Data","text":"Please note cleanepi project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"citing-this-package","dir":"","previous_headings":"","what":"Citing this package","title":"Clean and Standardize Epidemiological Data","text":"","code":"citation(\"cleanepi\") #> To cite package 'cleanepi' in publications use: #>  #>   Mané K (2024). _cleanepi: Clean and Standardize Epidemiological #>   Data_. #>   <https://epiverse-trace.github.io/cleanepi,https://github.com/epiverse-trace/cleanepi>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {cleanepi: Clean and Standardize Epidemiological Data}, #>     author = {Karim Mané}, #>     year = {2024}, #>     url = {https://epiverse-trace.github.io/cleanepi, #> https://github.com/epiverse-trace/cleanepi}, #>   }"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a report obtained from a data cleaning step to a data frame — add_report","title":"Add a report obtained from a data cleaning step to a data frame — add_report","text":"Add report obtained data cleaning step data frame","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a report obtained from a data cleaning step to a data frame — add_report","text":"","code":"add_report(data, report, name = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a report obtained from a data cleaning step to a data frame — add_report","text":"data  data frame report named list data frame containing details cleaning operations. name character name cleaning operation. default value NULL.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a report obtained from a data cleaning step to a data frame — add_report","text":"input data frame report associated . can accessed using attr(data, \"report\")","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an element to the data dictionary — add_to_dictionary","title":"Add an element to the data dictionary — add_to_dictionary","text":"Add element data dictionary","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an element to the data dictionary — add_to_dictionary","text":"","code":"add_to_dictionary(dictionary, option, value, grp, order = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an element to the data dictionary — add_to_dictionary","text":"dictionary data frame data dictionary option character new option add dictionary value character value new option replaced . grp character name column contains option interest. order numeric order new option.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an element to the data dictionary — add_to_dictionary","text":"object type data frame. new data dictionary additional line contains details new options.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an element to the data dictionary — add_to_dictionary","text":"","code":"test <- add_to_dictionary(   dictionary = readRDS(system.file(\"extdata\", \"test_dict.RDS\",                        package = \"cleanepi\")),   option     = \"ml\",   value      = \"male\",   grp        = \"gender\",   order      = NULL  )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an element to the report object — add_to_report","title":"Add an element to the report object — add_to_report","text":"Add element report object","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an element to the report object — add_to_report","text":"","code":"add_to_report(x, key, value = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an element to the report object — add_to_report","text":"x data frame  linelist key name cleaning operation value object add report object","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an element to the report object — add_to_report","text":"input report object additional element","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an element to the report object — add_to_report","text":"","code":"# scan through the data scan_res <- scan_data(data = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                                  package = \"cleanepi\")))  # Perform data cleaning cleaned_data <- clean_data(   data   = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                package = \"cleanepi\")),   params = list(     keep       = NULL,     to_numeric = \"sex\",     dictionary = NULL   ) ) #>  #> cleaning column names #> standardising date columns #> converting sex into numeric  # add the data scanning result to the report cleaned_data <- add_to_report(x     = cleaned_data,                               key   = \"scanning_result\",                               value = scan_res)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/as_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat a given date — as_date","title":"Reformat a given date — as_date","text":"Reformat given date","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/as_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat a given date — as_date","text":"","code":"as_date(   x,   format = c(\"ymd\", \"ydm\", \"dmy\", \"mdy\", \"myd\", \"dym\", \"Ymd\", \"Ydm\", \"dmY\", \"mdY\", \"mYd\",     \"dYm\") )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/as_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat a given date — as_date","text":"x string interest format date format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate age from a specified date column — calculate_age","title":"Calculate age from a specified date column — calculate_age","text":"Calculate age specified date column","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate age from a specified date column — calculate_age","text":"","code":"calculate_age(   data,   target_column = NULL,   end_date = Sys.Date(),   age_in = \"years\",   na_strings = cleanepi::common_na_strings )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate age from a specified date column — calculate_age","text":"data data frame least one date column. target_column string specifying name date column interest. end_date end date, default today's date. age_in string specifies whether return age 'years', 'months', 'weeks' 'days'. default 'years'. na_strings string represents missing values date column interest. needed date column contains missing values.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate age from a specified date column — calculate_age","text":"input data frame 2 additional columns: \"age_in_years\",  \"age_in_months\",  \"age_in_weeks\", \"age_in_days\" depending value 'age_in' parameter. \"remainder_days\": column number remaining days age calculated years, weeks months.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate age from a specified date column — calculate_age","text":"","code":"age <- calculate_age(   data          = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                       package = \"cleanepi\")),   target_column = \"dateOfBirth\",   end_date      = Sys.Date(),   age_in        = \"months\",   na_strings    = \"-99\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the order of the sequence of date-events is valid — check_date_sequence","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"Checks whether date sequence vector  specified columns order .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"","code":"check_date_sequence(data, target_columns, remove_bad_seq = FALSE)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"data data frame target_columns vector event column names. Users specify least 2 column names expected order. example: target_columns = c(\"date_symptoms_onset\", \"date_hospitalization\", \"date_death\"). remove_bad_seq Boolean specify rows incorrect order filtered . default FALSE","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"Rows input data frame incorrect date sequence remove_bad_seq = FALSE, input data frame without rows .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"","code":"good_date_sequence <- check_date_sequence(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = c(\"date_first_pcr_positive_test\", \"date.of.admission\"),   remove_bad_seq = FALSE ) #> Warning: Detected 2 incorrect date sequences at line(s): 6, 8"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the uniqueness in values of the sample IDs column — check_ids_uniqueness","title":"Checks the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"Checks uniqueness values sample IDs column","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"","code":"check_ids_uniqueness(data, id_col_name)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"data input data frame id_col_name name column contains sample IDs","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"input data frame extra element attributes missing duplicated IDs.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the subject IDs comply with the expected format — check_subject_ids","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"Check whether subject IDs comply expected format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"","code":"check_subject_ids(   data,   id_column_name,   format = NULL,   prefix = NULL,   suffix = NULL,   range = NULL )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"data data frame id_column_name column name  subject IDs. specified, first column considered default. format  format subject IDs prefix prefix used subject IDs suffix suffix used subject IDs range vector range numbers sample IDs","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"cleaned data frame correct subject IDs. incorrect subject ids stored report object.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"","code":"dat <- check_subject_ids(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   id_column_name = \"study_id\",   format         = NULL,   prefix         = \"PS\",   suffix         = \"P2\",   range          = c(1, 100) )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and standardize data — clean_data","title":"Clean and standardize data — clean_data","text":"Cleans messy data frames performing several operations. Include cleaning column names, detecting removing duplicates, empty records columns, constant columns, replacing missing values NA, converting character columns dates contain certain number date values, detecting subject IDs wrong formats.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and standardize data — clean_data","text":"","code":"clean_data(   data,   params = list(keep = NULL, replace_missing_values = list(target_columns = NULL,     na_strings = cleanepi::common_na_strings), remove_duplicates = list(target_columns =     NULL, rm_empty_rows = TRUE, rm_empty_cols = TRUE, rm_constant_cols = TRUE),     standardize_dates = list(target_columns = NULL, error_tolerance = 0.5, format = NULL,     timeframe = NULL), standardize_subject_ids = list(id_col_name = \"id\", format = NULL,     prefix = NULL, suffix = NULL, range = NULL), dictionary = NULL, to_numeric = NULL) )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and standardize data — clean_data","text":"data input data frame linelist params list parameters define cleaning operations applied input data. Possible values : keep: vector column names kept appear original data. column names standardized NULL (default value). replace_missing_values: list parameters used replacing missing values NA. parameters inputs replace_missing_values() function. remove_duplicates: list arguments defines list columns considered looking duplicates. also contains arguments determine constant rows columns handled. input values remove_duplicates() function. standardize_date: list parameters used standardize date values input data. represent input values standardize_dates() function. standardize_subject_ids: list parameters needed check IDs comply expect format. arguments input values check_subject_ids(). to_numeric: vector column names. provided, values columns converted numeric. dictionary: data frame used substitute current values specified columns dictionary. main argument clean_using_dictionary() function.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and standardize data — clean_data","text":"cleaned input date according user-specified parameters. associated data cleaning report can accessed using attr(cleaned_data, \"report\")","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and standardize data — clean_data","text":"","code":"keep <- NULL # column names standardization will be performed across # all columns  # Parameters for substituting missing values with NA: replace_missing_values <- list(target_columns = NULL, na_strings = \"-99\")  # Parameters for duplicates removal across all columns # (target_columns = NULL) remove_duplicates <- list(target_columns   = NULL,                           rm_empty_rows    = TRUE,                           rm_empty_cols    = TRUE,                           rm_constant_cols = TRUE)  # Parameters for dates standardization standardize_date <- list(target_columns  = NULL,                          error_tolerance = 0.5,                          format          = NULL,                          timeframe       = as.Date(c(\"1973-05-29\",                                                      \"2023-05-29\")))  # Parameters for subject IDs standardization standardize_subject_ids <- list(id_col_name = \"study_id\",                                 format      = NULL,                                 prefix      = \"PS\",                                 suffix      = \"P2\",                                 range       = c(1, 100))  # to_numeric = \"sex\" the 'sex' column will be converted into numeric  # dictionary = NULL the dictionary-based cleaning will not be performed here  cleaned_data <- clean_data(   data   = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                package = \"cleanepi\")),   params = list(     keep                    = NULL,     replace_missing_values  = replace_missing_values,     remove_duplicates       = remove_duplicates,     standardize_date        = standardize_date,     standardize_subject_ids = standardize_subject_ids,     to_numeric              = \"sex\",     dictionary              = NULL   ) ) #>  #> cleaning column names #> replacing missing values with NA #> removing duplicated rows #> standardising date columns #> checking subject IDs format #> converting sex into numeric"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform dictionary-based cleaning — clean_using_dictionary","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"Perform dictionary-based cleaning","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"","code":"clean_using_dictionary(data, dictionary)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"data data frame dictionary data dictionary associated input data.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"data frame cleaned values target columns specified data dictionary.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"","code":"data           <- readRDS(system.file(\"extdata\", \"messy_data.RDS\",                                       package = \"cleanepi\")) data$gender[2] <- \"homme\" cleaned_df     <- clean_using_dictionary(   data       = data,   dictionary = readRDS(system.file(\"extdata\", \"test_dict.RDS\",                                    package = \"cleanepi\")) ) #>  #> Detected misspelled values at lines 2 of column 'gender' #> Please add the misspelled options to the data dictionary using the add_to_dictionary() function.FALSE"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/cleanepi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cleanepi: Clean and Standardize Epidemiological Data — cleanepi-package","title":"cleanepi: Clean and Standardize Epidemiological Data — cleanepi-package","text":"cleanepi provides functions cleaning standardizing tabular data, tailored specifically curating epidemiological data.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/cleanepi/reference/cleanepi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cleanepi: Clean and Standardize Epidemiological Data — cleanepi-package","text":"Maintainer: Karim Mané karim.mane@lshtm.ac.uk (ORCID) contributors: Thibaut Jombart thibautjombart@gmail.com [copyright holder] Bubacarr Bah Bubacarr.Bah1@lshtm.ac.uk (ORCID) [contributor] Bankolé Ahadzie Bankole.Ahadzie@lshtm.ac.uk [contributor] Nuredin Mohammed Nuredin.Mohammed@lshtm.ac.uk [contributor] Abdoelnaser Degoot abdoelnaser-mahmood.degoot@lshtm.ac.uk (ORCID) [contributor] Hugo Gruson hugo@data.org (ORCID) [reviewer] Pratik R. Gupte pratik.gupte@lshtm.ac.uk (ORCID) [reviewer] James M. Azam james.azam@lshtm.ac.uk (ORCID) [reviewer] Joshua W. Lambert joshua.lambert@lshtm.ac.uk (ORCID) [reviewer]","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/common_na_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Common strings representing missing values — common_na_strings","title":"Common strings representing missing values — common_na_strings","text":"vector contains common values NA (missing) intended use within cleanepi functions replace_missing_values(). current list strings used can found printing common_na_strings. serves helpful tool explore data possible missing values. However, strongly caution using replace NA values without meticulously examining incidence case. Please note common_na_strings utilizes \\\\ around \"?\", \".\", \"*\" characters prevent wildcard","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/common_na_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common strings representing missing values — common_na_strings","text":"","code":"common_na_strings"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/common_na_strings.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common strings representing missing values — common_na_strings","text":"vector 35 character strings.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/common_na_strings.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Common strings representing missing values — common_na_strings","text":"vector combination naniar::common_na_strings (https://github.com/njtierney/naniar/) strings found literature.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/construct_misspelled_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the report for the detected misspelled values during dictionary-based\ndata cleaning operation — construct_misspelled_report","title":"Build the report for the detected misspelled values during dictionary-based\ndata cleaning operation — construct_misspelled_report","text":"Build report detected misspelled values dictionary-based data cleaning operation","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/construct_misspelled_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the report for the detected misspelled values during dictionary-based\ndata cleaning operation — construct_misspelled_report","text":"","code":"construct_misspelled_report(misspelled_options, data)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/construct_misspelled_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the report for the detected misspelled values during dictionary-based\ndata cleaning operation — construct_misspelled_report","text":"misspelled_options list detected misspelled values columns interest. data data frame","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/construct_misspelled_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the report for the detected misspelled values during dictionary-based\ndata cleaning operation — construct_misspelled_report","text":"data frame details input data misspelled values found.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert values in a character vector into numeric — convert","title":"Convert values in a character vector into numeric — convert","text":"conversion applied non-missing non-numeric values found input vector","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert values in a character vector into numeric — convert","text":"","code":"convert(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert values in a character vector into numeric — convert","text":"x vector type character","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert values in a character vector into numeric — convert","text":"vector type numeric length input vector","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric to date — convert_numeric_to_date","title":"Convert numeric to date — convert_numeric_to_date","text":"Convert numeric date","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric to date — convert_numeric_to_date","text":"","code":"convert_numeric_to_date(data, numeric_date_columns, ref_date, forward = TRUE)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric to date — convert_numeric_to_date","text":"data data frame numeric_date_columns vector comma-separated list  columns names converted numeric date ref_date reference date forward Boolean indicate whether counts started reference date (TRUE) (FALSE). default FALSE.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert numeric to date — convert_numeric_to_date","text":"data frame column interest updated","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert columns into numeric — convert_to_numeric","title":"Convert columns into numeric — convert_to_numeric","text":"function invoked without specifying column names converted, automatically scans columns containing exclusively missing, numeric, character values. Furthermore, identifies columns proportion numeric values least twice percentage character values.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert columns into numeric — convert_to_numeric","text":"","code":"convert_to_numeric(data, to_numeric = NULL, scan_res = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert columns into numeric — convert_to_numeric","text":"data data frame to_numeric vector column names scan_res data frame obtained scan_data() function","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert columns into numeric — convert_to_numeric","text":"resulting data frame conversion process, wherein specified detected columns transformed numeric format.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert columns into numeric — convert_to_numeric","text":"","code":"dat <- convert_to_numeric(   data = readRDS(system.file(\"extdata\", \"messy_data.RDS\",                              package = \"cleanepi\")),   to_numeric = \"age\",   scan_res   = NULL )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_column_existence.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if date column exists in the given dataset — date_check_column_existence","title":"Check if date column exists in the given dataset — date_check_column_existence","text":"Check date column exists given dataset","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_column_existence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if date column exists in the given dataset — date_check_column_existence","text":"","code":"date_check_column_existence(data, date_column_names)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_column_existence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if date column exists in the given dataset — date_check_column_existence","text":"data dataframe date_column_names name columns check","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_timeframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Check date time frame — date_check_timeframe","title":"Check date time frame — date_check_timeframe","text":"Check date time frame","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_timeframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check date time frame — date_check_timeframe","text":"","code":"date_check_timeframe(first_date, last_date)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_timeframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check date time frame — date_check_timeframe","text":"first_date Date object specify.ing first valid date. default value fifty years last_date last_date  Date object specifying last valid date. defaults value current date.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_timeframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check date time frame — date_check_timeframe","text":"list first last dates","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_choose_first_good.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","title":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","text":"Choose first non-missing date data frame dates","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_choose_first_good.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","text":"","code":"date_choose_first_good(date_a_frame)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_choose_first_good.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","text":"date_a_frame data frame column contains different parsing date vector","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert characters to dates — date_convert","title":"Convert characters to dates — date_convert","text":"Convert characters dates","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert characters to dates — date_convert","text":"","code":"date_convert(data, cols, error_tolerance, timeframe = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert characters to dates — date_convert","text":"data data frame cols date column name(s) error_tolerance numerical value 0 1, indicating proportion entries identified dates tolerated. See clean_data() helper details. timeframe vector 2 values type date. provided, date values fall within timeframe set NA.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert characters to dates — date_convert","text":"data frame specified columns converted Date.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert_and_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert and update the date values — date_convert_and_update","title":"Convert and update the date values — date_convert_and_update","text":"Convert update date values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert_and_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert and update the date values — date_convert_and_update","text":"","code":"date_convert_and_update(   data,   timeframe,   new_dates,   cols,   error_tolerance = 0.5 )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert_and_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert and update the date values — date_convert_and_update","text":"data data frame timeframe vector 2 values type date. provided, date values fall within timeframe set NA. new_dates vector converted date values cols names date column converted error_tolerance numerical value 0 1, indicating proportion entries identified dates tolerated. See clean_data() helper details.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert_and_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert and update the date values — date_convert_and_update","text":"list 2 data frames: updated input data (columns converted Date) data frame date values within specified timeframe.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_complex_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect complex date format — date_detect_complex_format","title":"Detect complex date format — date_detect_complex_format","text":"Detect complex date format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_complex_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect complex date format — date_detect_complex_format","text":"","code":"date_detect_complex_format(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_complex_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect complex date format — date_detect_complex_format","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_day_or_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect whether it's day or month — date_detect_day_or_month","title":"Detect whether it's day or month — date_detect_day_or_month","text":"Detect whether day month","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_day_or_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect whether it's day or month — date_detect_day_or_month","text":"","code":"date_detect_day_or_month(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_day_or_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect whether it's day or month — date_detect_day_or_month","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect a date format with only 1 separator — date_detect_format","title":"Detect a date format with only 1 separator — date_detect_format","text":"Detect date format 1 separator","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect a date format with only 1 separator — date_detect_format","text":"","code":"date_detect_format(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect a date format with only 1 separator — date_detect_format","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the special character that is the separator in the date values — date_detect_separator","title":"Detect the special character that is the separator in the date values — date_detect_separator","text":"Detect special character separator date values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the special character that is the separator in the date values — date_detect_separator","text":"","code":"date_detect_separator(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the special character that is the separator in the date values — date_detect_separator","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_separator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the special character that is the separator in the date values — date_detect_separator","text":"detected separator","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_simple_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Get format from a simple date value — date_detect_simple_format","title":"Get format from a simple date value — date_detect_simple_format","text":"Get format simple date value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_simple_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get format from a simple date value — date_detect_simple_format","text":"","code":"date_detect_simple_format(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_simple_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get format from a simple date value — date_detect_simple_format","text":"x string date value interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect date format from a date column — date_get_format","title":"Detect date format from a date column — date_get_format","text":"Detect date format date column","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect date format from a date column — date_get_format","text":"","code":"date_get_format(data, date_column_name, sep)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect date format from a date column — date_get_format","text":"data  data frame date_column_name name date columns interest sep separator date string","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect date format from a date column — date_get_format","text":"string detected date format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part1.html","id":null,"dir":"Reference","previous_headings":"","what":"Get part1 of date value — date_get_part1","title":"Get part1 of date value — date_get_part1","text":"Get part1 date value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get part1 of date value — date_get_part1","text":"","code":"date_get_part1(x, sep)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get part1 of date value — date_get_part1","text":"x string interest sep separator string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get part2 of date value — date_get_part2","title":"Get part2 of date value — date_get_part2","text":"Get part2 date value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get part2 of date value — date_get_part2","text":"","code":"date_get_part2(x, sep)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get part2 of date value — date_get_part2","text":"x string interest sep separator string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part3.html","id":null,"dir":"Reference","previous_headings":"","what":"Get part3 of date value — date_get_part3","title":"Get part3 of date value — date_get_part3","text":"Get part3 date value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get part3 of date value — date_get_part3","text":"","code":"date_get_part3(x, sep)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get part3 of date value — date_get_part3","text":"x string interest sep separator string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":null,"dir":"Reference","previous_headings":"","what":"Try and guess dates from a characters — date_guess","title":"Try and guess dates from a characters — date_guess","text":"Note FEATURE STILL EXPERIMENTAL: strongly recommend checking converted dates manually. function tries extract dates character vector factor. treats entry independently, using regular expressions detect date present, format, successful converts entry standard Date Ymd format (e.g. 2018-01-21). Entries processed result NA. error threshold can used define maximum number resulting NA (.e. entries without identified date) can tolerated. threshold exceeded, original vector returned.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try and guess dates from a characters — date_guess","text":"","code":"date_guess(   x,   error_tolerance = 0.5,   quiet = TRUE,   modern_excel = TRUE,   orders = list(world_named_months = c(\"Ybd\", \"dby\"), world_digit_months = c(\"dmy\",     \"Ymd\"), US_formats = c(\"Omdy\", \"YOmd\")) )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try and guess dates from a characters — date_guess","text":"x character vector factor error_tolerance number 0 1 indicating proportion entries identified dates tolerated; proportion exceeded, original vector returned, message issued; defaults 0.1 (10 percent) quiet logical indicating messages displayed console (TRUE, default); set FALSE silence messages modern_excel parsing dates excel, dates stored integers. Modern versions Excel represent dates number days since 1900-01-01, pre-2011 Excel OSX origin set 1904-01-01. parameter TRUE (default), assumes numeric values represent dates either Windows version Excel 2011 later version Excel OSX. Set parameter FALSE data came OSX version Excel 2011. orders date codes fine-grained parsing dates. allows parsing mixed dates. list supplied, list used successive tries parsing.  passed lubridate::parse_date_time(). Default orders (getOption(\"linelist_guess_orders\")) parse World dmy/dby dates US mdy/bdy dates. check_timeframe logical check whether dates fall within timeframe","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Try and guess dates from a characters — date_guess","text":"Converting ambiguous character strings dates difficult many reasons: dates may use standard Ymd format within variable, dates may follow different formats dates may mixed things dates behaviour .Date presence non-date hard predict, sometimes returning NA, sometimes issuing error. function tries address issues. Dates following format automatically detected, irrespective separators (e.g. \"-\", \" \", \"/\") surrounding text: \"19 09 2018\" \"2018 09 19\" \"19 Sep 2018\" \"2018 Sep 19\" \"Sep 19 2018\"","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"how-it-works","dir":"Reference","previous_headings":"","what":"How it works","title":"Try and guess dates from a characters — date_guess","text":"function relies heavily lubridate::parse_date_time(), extremely flexible date parser works well consistent date formats, can quickly become unweildy may produce spurious results. guess_dates() use list formats orders argument run parse_date_time() format vector separately take first correctly parsed date trials. default, orders getOption(\"linelist_guess_orders\"):   case, dates 03 Jan 2018, 07/03/1982, 08/20/85 correctly intepreted 2018-01-03, 1982-03-07, 1985-08-20. examples section show can manipulate orders customised situation.","code":"list(   world_named_months = c(\"Ybd\", \"dby\"),   world_digit_months = c(\"dmy\", \"Ymd\"),   US_formats         = c(\"Omdy\", \"YOmd\") )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Try and guess dates from a characters — date_guess","text":"Thibaut Jombart, Zhian N. Kamvar","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try and guess dates from a characters — date_guess","text":"","code":"if (FALSE) { # Mixed format date -----------------------------------------  guess_dates(c(\"03 Jan 2018\", \"07/03/1982\", \"08/20/85\")) # default  # Prioritizing specific date formats ------------------------ # # The default orders prioritize world date ordering over American-style.  print(ord <- getOption(\"linelist_guess_orders\"))  # if you want to prioritize American-style dates with numeric months, you # can switch the second and third elements of the default orders  print(ord <- getOption(\"linelist_guess_orders\")) print(us_ord <- ord[c(1, 3, 2)]) guess_dates(c(\"03 Jan 2018\", \"07/03/1982\", \"08/20/85\"), orders = us_ord)  # Handling dates with time formats -------------------------- # # If you have a format with hours, minutes and seconds, you can also add that # to the list of formats. Note, however, that this function will drop levels # below day.  print(ord$ymdhms <- c(\"Ymdhms\", \"Ymdhm\"))  guess_dates(c(\"2014_04_05_23:15:43\", \"03 Jan 2018\", \"07/03/1982\", \"08/20/85\"), orders = ord)  # Handling  missing and nonsense data ----------------------- # # guess_dates can handle messy dates and tolerate missing data  x <- c(\"01-12-2001\", \"male\", \"female\", \"2018-10-18\", NA, NA, \"2018_10_17\",        \"43391\", \"2018 10 19\", \"// 24/12/1989\", \"this is 24/12/1989!\",        \"RECON NGO: 19 Sep 2018 :)\", \"6/9/11\", \"10/10/10\")  guess_dates(x, error_tolerance = 1) # forced conversion  guess_dates(x, error_tolerance = 0.15) # only 15% errors allowed }"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","title":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","text":"Guess character vector contains Date values, convert date","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","text":"","code":"date_guess_convert(data, error_tolerance, timeframe)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","text":"data data frame error_tolerance numeric value 0 1 signifies proportion entries recognized dates acceptable. detailed information, can refer clean_data() helper function. timeframe expected first last date. See clean_data() helper details.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_extract_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract date from a character string — date_i_extract_string","title":"Extract date from a character string — date_i_extract_string","text":"function looks well-formatted date character string inside single character string, returns matching date using %Y-%m-%d format (e.g. 2018-01-23).","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_extract_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract date from a character string — date_i_extract_string","text":"","code":"date_i_extract_string(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_extract_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract date from a character string — date_i_extract_string","text":"Either NA_character_ date, standardized character string.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_extract_string.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract date from a character string — date_i_extract_string","text":"Thibaut Jombart","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_find_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess date format of a character string — date_i_find_format","title":"Guess date format of a character string — date_i_find_format","text":"motivation behind .Date handle correctly format argument, e.g. .Date(\"01-12-2001\", format = \"%Y-%m-%d\") returns 1-12-20. Tries match single character string regular expressions representing potential date formats. Returns format something can processed .Date match found, NULL otherwise.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_find_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess date format of a character string — date_i_find_format","text":"","code":"date_i_find_format(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_find_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess date format of a character string — date_i_find_format","text":"matching format can found, function returns NULL; matching format found, function returned matched regular expression (clean date) format compatible .Date.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_find_format.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Guess date format of a character string — date_i_find_format","text":"Thibaut Jombart","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_make_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the auto-detected format — date_make_format","title":"Build the auto-detected format — date_make_format","text":"Put together different date format characters identified target date column.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_make_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the auto-detected format — date_make_format","text":"","code":"date_make_format(f1, f2, tmp_sep)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_make_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the auto-detected format — date_make_format","text":"f1 first part date values f2 second part date values tmp_sep character string separate first second parts date values.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_make_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the auto-detected format — date_make_format","text":"character string represent inferred format date values.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_match_format_and_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the number of provided formats matches the number of target\ncolumns to be standardized. — date_match_format_and_column","title":"Check whether the number of provided formats matches the number of target\ncolumns to be standardized. — date_match_format_and_column","text":"Check whether number provided formats matches number target columns standardized.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_match_format_and_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the number of provided formats matches the number of target\ncolumns to be standardized. — date_match_format_and_column","text":"","code":"date_match_format_and_column(target_columns, format)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_match_format_and_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the number of provided formats matches the number of target\ncolumns to be standardized. — date_match_format_and_column","text":"target_columns vector column names standardised format vector formats used standardising columns","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_match_format_and_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the number of provided formats matches the number of target\ncolumns to be standardized. — date_match_format_and_column","text":"vector format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process date variable — date_process","title":"Process date variable — date_process","text":"Process date variable","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process date variable — date_process","text":"","code":"date_process(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process date variable — date_process","text":"x object date class","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process date variable — date_process","text":"modified input object","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_rescue_lubridate_failures.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","title":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","text":"Find dates lubridate ","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_rescue_lubridate_failures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","text":"","code":"date_rescue_lubridate_failures(date_a_frame, original_dates, mxl = TRUE)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_rescue_lubridate_failures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","text":"date_a_frame data frame column contains different parsing date vector original_dates vector original dates. mxl \"modern excel\" TRUE, uses 1900 origin, otherwise 1904 used origin.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_trim_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim dates outside of the defined boundaries — date_trim_outliers","title":"Trim dates outside of the defined boundaries — date_trim_outliers","text":"Trim dates outside defined boundaries","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_trim_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim dates outside of the defined boundaries — date_trim_outliers","text":"","code":"date_trim_outliers(new_dates, dmin, dmax, cols, original_dates)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_trim_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim dates outside of the defined boundaries — date_trim_outliers","text":"new_dates vector new date values dmin minimum date dmax maximum date cols name date column interest original_dates vector original date values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_columns_to_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the numeric columns that appears as characters due to the presence of\nsome character values in the column. — detect_columns_to_convert","title":"Detect the numeric columns that appears as characters due to the presence of\nsome character values in the column. — detect_columns_to_convert","text":"Detect numeric columns appears characters due presence character values column.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_columns_to_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the numeric columns that appears as characters due to the presence of\nsome character values in the column. — detect_columns_to_convert","text":"","code":"detect_columns_to_convert(scan_res)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_columns_to_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the numeric columns that appears as characters due to the presence of\nsome character values in the column. — detect_columns_to_convert","text":"scan_res data frame corresponds result scan_data() function","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_columns_to_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the numeric columns that appears as characters due to the presence of\nsome character values in the column. — detect_columns_to_convert","text":"vector column names converted numeric","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_misspelled_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","title":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","text":"Detect misspelled options columns cleaned","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_misspelled_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","text":"","code":"detect_misspelled_options(data, dictionary)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_misspelled_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","text":"data data frame dictionary data dictionary associated input data.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_misspelled_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","text":"list indexes misspelled values every column needs cleaned.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"Identify return duplicated rows data frame linelist.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"","code":"find_duplicates(data, target_columns = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"data data frame linelist. target_columns vector columns names indices consider looking duplicates. input data linelist object, parameter can set tagsfrom duplicates removed. default value NULL, considers duplicates across columns.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"data frame linelist duplicated rows following 2 additional columns: row_id: indices duplicated rows input data. Users can choose indices, row consider redundant group duplicates. group_id: unique identifier associated group duplicates.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"","code":"dups <- find_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = c(\"dt_onset\", \"dt_report\", \"sex\", \"outcome\") ) #> Found 57 duplicated rows. Please consult the report for more details."},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_column_composition.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the percentage of missing and other data type values in a vector\ncontaining different data types such as numeric, Date, character, and\nlogical. — get_column_composition","title":"Calculate the percentage of missing and other data type values in a vector\ncontaining different data types such as numeric, Date, character, and\nlogical. — get_column_composition","text":"Calculate percentage missing data type values vector containing different data types numeric, Date, character, logical.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_column_composition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the percentage of missing and other data type values in a vector\ncontaining different data types such as numeric, Date, character, and\nlogical. — get_column_composition","text":"","code":"get_column_composition(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_column_composition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the percentage of missing and other data type values in a vector\ncontaining different data types such as numeric, Date, character, and\nlogical. — get_column_composition","text":"x vector ones combination various data types.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_column_composition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the percentage of missing and other data type values in a vector\ncontaining different data types such as numeric, Date, character, and\nlogical. — get_column_composition","text":"vector 5 elements representing percentage missing, numeric, date, character, logical values found input vector.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_new_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the indices of the columns to be renamed — get_new_names","title":"Get the indices of the columns to be renamed — get_new_names","text":"Get indices columns renamed","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_new_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the indices of the columns to be renamed — get_new_names","text":"","code":"get_new_names(original_names, target_columns)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_new_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the indices of the columns to be renamed — get_new_names","text":"original_names vector column names input data target_columns expression specifies column names renamed","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_new_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the indices of the columns to be renamed — get_new_names","text":"named vector indices columns renamed","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sum from number — get_sum","title":"Get sum from number — get_sum","text":"Get sum number","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sum from number — get_sum","text":"","code":"get_sum(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sum from number — get_sum","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_target_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of the columns from which duplicates will be found — get_target_column_names","title":"Get the names of the columns from which duplicates will be found — get_target_column_names","text":"Get names columns duplicates found","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_target_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of the columns from which duplicates will be found — get_target_column_names","text":"","code":"get_target_column_names(data, target_columns, cols)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_target_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of the columns from which duplicates will be found — get_target_column_names","text":"data data frame linelist target_columns vector column names. linelist data, can 'linelist_tags' cols vector empty constant columns","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_target_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of the columns from which duplicates will be found — get_target_column_names","text":"vector target column names indexes","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/is_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Check order of a sequence of events — is_order","title":"Check order of a sequence of events — is_order","text":"Check order sequence events","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/is_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check order of a sequence of events — is_order","text":"","code":"is_order(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/is_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check order of a sequence of events — is_order","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Make data dictionary for 1 field — make_metadata","title":"Make data dictionary for 1 field — make_metadata","text":"Make data dictionary 1 field","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make data dictionary for 1 field — make_metadata","text":"","code":"make_metadata(x, field_column)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make data dictionary for 1 field — make_metadata","text":"x vector choices input data field_column character name field choices made.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make data dictionary for 1 field — make_metadata","text":"data frame dictionary format accepted matchmaker package.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_readcap_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Redcap data dictionary into matchmaker dictionary format — make_readcap_dictionary","title":"Convert Redcap data dictionary into matchmaker dictionary format — make_readcap_dictionary","text":"Convert Redcap data dictionary matchmaker dictionary format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_readcap_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Redcap data dictionary into matchmaker dictionary format — make_readcap_dictionary","text":"","code":"make_readcap_dictionary(metadata, field_column, opt_column, field_type)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_readcap_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Redcap data dictionary into matchmaker dictionary format — make_readcap_dictionary","text":"metadata data frame data dictionary associated Redcap project field_column name column, input dictionary, contains field names Redcap project data opt_column name column, input dictionary, contains definition choices every column Redcap project data field_type character name column contains field type information","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_readcap_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Redcap data dictionary into matchmaker dictionary format — make_readcap_dictionary","text":"data frame 4 columns. format required matchmaker R package dictionary-based cleaning.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/numbers_only.html","id":null,"dir":"Reference","previous_headings":"","what":"Detects whether a string contains only numbers or not. — numbers_only","title":"Detects whether a string contains only numbers or not. — numbers_only","text":"Detects whether string contains numbers .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/numbers_only.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detects whether a string contains only numbers or not. — numbers_only","text":"","code":"numbers_only(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/numbers_only.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detects whether a string contains only numbers or not. — numbers_only","text":"x string numbers","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_misspelled_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the detected misspelled values — print_misspelled_values","title":"Print the detected misspelled values — print_misspelled_values","text":"Print detected misspelled values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_misspelled_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the detected misspelled values — print_misspelled_values","text":"","code":"print_misspelled_values(misspelled_options)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_misspelled_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the detected misspelled values — print_misspelled_values","text":"misspelled_options list misspelled values found different columns input data.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate report from data cleaning operations — print_report","title":"Generate report from data cleaning operations — print_report","text":"Generate report data cleaning operations","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate report from data cleaning operations — print_report","text":"","code":"print_report(   data,   report_title = \"{cleanepi} data cleaning report\",   output_directory = \".\",   output_filename = NULL,   format = \"html\",   print = TRUE )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate report from data cleaning operations — print_report","text":"data data.frame linelist object returned clean_data() main functions data cleaning module. report_title title appear report output_directory string specifying directory save report. Default current directory. output_filename string specifying filename report, excluding file extension. filename supplied, one automatically generated format cleanepi_report_YYMMDD_HHMMSS. format file format report. Currently \"html\" supported. print logical specifies whether print generated HTML file .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate report from data cleaning operations — print_report","text":"string containing name path saved report","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicates and constant rows and columns — remove_duplicates","title":"Remove duplicates and constant rows and columns — remove_duplicates","text":"Removes duplicates noise  empty rows columns, constant columns. operations automatically performed default unless specified otherwise. Users can specify set columns consider removing duplicates 'target_columns' argument.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicates and constant rows and columns — remove_duplicates","text":"","code":"remove_duplicates(   data,   target_columns = NULL,   remove = NULL,   rm_empty_rows = TRUE,   rm_empty_cols = TRUE,   rm_constant_cols = TRUE )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicates and constant rows and columns — remove_duplicates","text":"data input data frame linelist. target_columns vector column names use looking duplicates. input data linelist object, parameter can set linelist_tags wish look duplicates tagged columns . Default NULL. remove vector duplicate indices removed. Duplicate indices unique identifiers rows original data frame linelist duplicates based target_columns. remove = NULL (default value), first duplicate kept rest duplicates group removed. rm_empty_rows logical variable used specify whether remove empty rows . default  value TRUE. rm_empty_cols logical variable used specify whether remove empty columns . default value TRUE. rm_constant_cols logical variable used specify whether remove constant columns . default value TRUE.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicates and constant rows and columns — remove_duplicates","text":" data frame linelist  without duplicates values constant columns.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicates and constant rows and columns — remove_duplicates","text":"","code":"no_dups <- remove_duplicates(   data             = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                          package = \"cleanepi\")),   target_columns   = \"linelist_tags\",   remove           = NULL,   rm_empty_rows    = TRUE,   rm_empty_cols    = TRUE,   rm_constant_cols = TRUE ) #> Found 57 duplicated rows. Please consult the report for more details."},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace missing values with NA — replace_missing_values","title":"Replace missing values with NA — replace_missing_values","text":"Replace missing values NA","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace missing values with NA — replace_missing_values","text":"","code":"replace_missing_values(   data,   target_columns = NULL,   na_strings = cleanepi::common_na_strings )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace missing values with NA — replace_missing_values","text":"data data frame linelist target_columns vector column names. provided, substitution missing values executed specified columns. input data linelist object, parameter can set linelist_tags wish replace missing values across tagged columns . na_strings vector strings represents missing values columns interest. default, utilizes cleanepi::common_na_strings. However, missing values string columns interest included predefined vector, can used value argument.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace missing values with NA — replace_missing_values","text":"input data missing values replaced NA.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace missing values with NA — replace_missing_values","text":"","code":"cleaned_data <- replace_missing_values(   data        = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                     package = \"cleanepi\")),   target_columns = \"sex\",   na_strings     = \"-99\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan a data frame to determine the percentage of missing, numeric,\nDate, character,  and logical values in every column. — scan_data","title":"Scan a data frame to determine the percentage of missing, numeric,\nDate, character,  and logical values in every column. — scan_data","text":"Scan data frame determine percentage missing, numeric, Date, character,  logical values every column.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan a data frame to determine the percentage of missing, numeric,\nDate, character,  and logical values in every column. — scan_data","text":"","code":"scan_data(data)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan a data frame to determine the percentage of missing, numeric,\nDate, character,  and logical values in every column. — scan_data","text":"data data frame linelist","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scan a data frame to determine the percentage of missing, numeric,\nDate, character,  and logical values in every column. — scan_data","text":" data frame linelist columns input data 5 rows representing percentage missing, numeric, date, character, logical values column.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scan a data frame to determine the percentage of missing, numeric,\nDate, character,  and logical values in every column. — scan_data","text":"","code":"scan_result <- scan_data(   data = readRDS(system.file(\"extdata\", \"messy_data.RDS\",                              package = \"cleanepi\")) )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize column names of a data frame or linelist — standardize_column_names","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"Standardize column names data frame linelist","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"","code":"standardize_column_names(data, keep = NULL, rename = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"data input data frame linelist. keep vector column names maintain . dealing linelist, can set linelist_tags, maintain tagged column names. Default NULL. rename expression used specify rename columns.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"data frame easy work column names.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"","code":"# do not rename 'date.of.admission' cleaned_data <- standardize_column_names(   data = readRDS(system.file(\"extdata\", \"test_df.RDS\",                              package = \"cleanepi\")),   keep = \"date.of.admission\" )  # do not rename 'date.of.admission', but rename 'dateOfBirth' and 'sex' to # 'DOB' and 'gender' respectively cleaned_data <- standardize_column_names(   data   = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                package = \"cleanepi\")),   keep   = \"date.of.admission\",   rename = \"dateOfBirth = DOB, sex=gender\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize date variables — standardize_dates","title":"Standardize date variables — standardize_dates","text":"Standardize date variables","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize date variables — standardize_dates","text":"","code":"standardize_dates(   data,   target_columns = NULL,   format = NULL,   timeframe = NULL,   error_tolerance = 0.5 )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize date variables — standardize_dates","text":"data data frame target_columns vector comma-separated list targeted date column names. format format date values date columns timeframe vector 2 values type date. provided, date values fall within timeframe set NA. error_tolerance numerical value 0 1, indicating proportion entries identified dates tolerated. See clean_data() helper details.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize date variables — standardize_dates","text":"input dataset date columns standardized","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize date variables — standardize_dates","text":"","code":"dat <- standardize_dates(   data            = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                         package = \"cleanepi\")),   target_columns  = \"date_first_pcr_positive_test\",   format          = NULL,   timeframe       = NULL,   error_tolerance = 0.5 )"}]
