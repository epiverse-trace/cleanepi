[{"path":"https://epiverse-trace.github.io/cleanepi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 cleanepi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"an-overview","dir":"Articles","previous_headings":"","what":"An overview","title":"Introduction to cleanepi","text":"Data cleaning critical step data analysis, especially considering messy nature real-world data, often includes duplicates, errors, incomplete entries, irrelevant formats. Addressing issues essential producing accurate, reliable, reproducible results. However, data cleaning can pose substantial barrier data analysis due time-consuming nature process. {cleanepi} R package designed specifically address challenge offering tools clean, curate, standardize datasets. Tailored specifically epidemiological data compatible data frame-like structures, {cleanepi} offers suite functions designed streamline common data cleaning tasks. vignette provides comprehensive guide functionalities encapsulated within {cleanepi}. provides users detailed insights function’s purpose practical usage, equipping tools necessary navigate manipulate cluttered datasets effectively.","code":"library(\"cleanepi\")"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"general-data-cleaning-tasks","dir":"Articles","previous_headings":"","what":"General data cleaning tasks","title":"Introduction to cleanepi","text":"main function {cleanepi} clean_data() can perform following tasks: Scan input data determine percent missing, numeric, character, logical date values every column input data frame. Clean column names convert intuitive formats. includes many sub-tasks replacing space, dot, hyphen two words underscore; converting camel-cases snake-cases; substituting foreign characters corresponding English characters; splitting long word multiple short words capital characters within, , connecting underscores. Find remove duplicated rows across columns specific columns. Remove empty rows columns well constant columns, .e. columns value across rows. Replace missing entries NA. Check whether sequence date events correct rows input data. Convert character columns Date column actually contains values type Date extent (default least 60% values Date). Detect remove rows subject IDs comply expected format. Perform dictionary-based cleaning: replace keys specific columns corresponding values stored data dictionary file, replace misspelled values correct ones. Convert numbers written characters numeric. Calculate time span columns values type Date. Convert numeric values Date. Print data cleaning report. {cleanepi}, every cleaning operation encapsulated within module, detailed descriptions provided package design vignette. module also specifies parameters required main function, outlined sections . following chunk, define list cleaning operations want perform input data. clean_data() function, shown , requires 2 arguments: data: data.frame linelist. params: list parameters define cleaning operations performed. returns cleaned dataset. report generated data cleaning operations list object attached cleaned data can accessed using attr() function. report contains details cleaning operation performed process. However, users can access report using code : report can also displayed HTML format using print_report() function shown :","code":"# IMPORTING THE TEST DATASET test_data <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                                  package = \"cleanepi\")) # SCAN THE DATA scan_result <- scan_data(test_data) # PARAMETERS FOR REPLACING MISSING VALUES WITH NA rm_na <- list(target_columns = NULL, na_strings = \"-99\")  # PARAMETERS FOR COLUMN NAMES STANDARDIZATION standardize_col_names <- list(keep = NULL, rename = NULL)  # PARAMETERS FOR DUBLICATES DETECTION AND REMOVAL rm_dup <- list(target_columns   = NULL)  # PARAMETERS FOR STANDARDING DATES stdn_date <- list(   target_columns = NULL,   error_tolerance = 0.4,   format = NULL,   timeframe = as.Date(c(\"1973-05-29\", \"2023-05-29\")),   orders = list(     world_named_months = c(\"Ybd\", \"dby\"),     world_digit_months = c(\"dmy\", \"Ymd\"),     US_formats = c(\"Omdy\", \"YOmd\")   ) )  # PARAMETERS FOR STANDARDING SUBJECT IDs stdn_ids <- list(target_columns = \"study_id\",                  prefix         = \"PS\",                  suffix         = \"P2\",                  range          = c(1, 100),                  nchar          = 7)  # PARAMETERS FOR CONSTANT COLUMNS, EMPTY ROWS AND COLUMNS REMOVAL remove_cte <- list(cutoff = 1)  # LAOD THE DATA DICTIONARY test_dictionary <- readRDS(system.file(\"extdata\", \"test_dictionary.RDS\",                                        package = \"cleanepi\"))  # DEFINE THE LIST OF PARAMETERS params <- list(   standardize_column_names = standardize_col_names,   remove_constants         = remove_cte,   replace_missing_values   = rm_na,   remove_duplicates        = rm_dup,   standardize_dates        = stdn_date,   standardize_subject_ids  = stdn_ids,   dictionary               = test_dictionary ) # CLEAN THE INPUT DATA FRAME cleaned_data <- clean_data(   data   = test_data,   params = params )  cleaning column names replacing missing values with NA removing the constant columns, empty rows and columns removing duplicated rows No duplicates were found. standardising date columns checking subject IDs format Warning: Detected incorrect subject ids at lines: 3, 5, 7 Use the correct_subject_ids() function to adjust them. performing dictionary-based cleaning # ACCESS THE DATA CLEANING REPORT report <- attr(cleaned_data, \"report\")  # SUMMARIZE THE REPORT OBJECT summary(report) #>                            Length Class      Mode      #> colnames                   2      data.frame list      #> missing_values_replaced_at 1      -none-     character #> constant_data              4      data.frame list      #> out_of_range_dates         3      data.frame list      #> multi_format_dates         5      data.frame list      #> incorrect_subject_id       2      data.frame list print_report(report)"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"specific-data-cleaning-tasks","dir":"Articles","previous_headings":"","what":"Specific data cleaning tasks","title":"Introduction to cleanepi","text":"{cleanepi} luckily provides users flexibility call specific function wish perform particular task individually. approach allows users control data cleaning process apply additional data cleaning functions needed. example, data cleaning operations, renaming columns, removing empty rows columns, removing columns values across rows, standardizing date columns, play central role standardizing epidemiological data. operations can performed within framework clean_data() function alone calling relevant function. setup offers users convenience flexibility, can perform cleaning operations , execute individually according specific needs.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"remove-constant-data","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Remove constant data","title":"Introduction to cleanepi","text":"datasets contain constant columns (columns values across rows), /empty rows columns (rows columns values missing .e NA). remove_constants() function can used remove “noise”. function takes following argument: data: input data frame linelist, cutoff: numeric, 0 1, used removing empty rows columns. provided, rows columns percent missing data greater cut-removed. Rows columns 100% missing values remove default. remove_constants() function returns dataset constant columns, empty rows columns removed.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"cleaning-column-names","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Cleaning column names","title":"Introduction to cleanepi","text":"syntax used name columns dataset creation depending many factors language, naming convention, etc. provide, {cleanepi}, standardize_column_names() function clean column names convert intuitive formats. performs many sub-tasks including: replacing space, dot, hyphen two words underscore; converting camel-cases snake-cases; substituting foreign characters corresponding English characters; splitting along word multiple short words capital characters within, , connecting underscores. function can take following arguments: data: input data frame linelist keep: vector column names maintain . dealing linelist, can set linelist_tags, maintain tagged column names. Default NULL. rename: vector focal column names vector column names renamed form new_name = \"old_name\". provided, columns undergo standardization. providing function parameters, users can redefine name columns get easy work column names. enables comprehensive naming system tailored needs user.","code":"# IMPORT AND PRINT THE INITAL COLUMN NAMES data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")) print(colnames(data)) col_name_cleaning [1] \"study_id\"                     \"event_name\"                   col_name_cleaning [3] \"country_code\"                 \"country_name\"                 col_name_cleaning [5] \"date.of.admission\"            \"dateOfBirth\"                  col_name_cleaning [7] \"date_first_pcr_positive_test\" \"sex\"  # KEEP 'date.of.admission' AS IS cleaned_data <- standardize_column_names(   data = data,   keep = \"date.of.admission\" ) print(colnames(data)) col_name_cleaning [1] \"study_id\"                     \"event_name\"                   col_name_cleaning [3] \"country_code\"                 \"country_name\"                 col_name_cleaning [5] \"date.of.admission\"            \"dateOfBirth\"                  col_name_cleaning [7] \"date_first_pcr_positive_test\" \"sex\"  # KEEP 'date.of.admission' AS IS, BUT RENAME 'dateOfBirth' AND 'sex' TO # 'DOB' AND 'gender' RESPECTIVELY cleaned_data <- standardize_column_names(   data   = data,   keep   = \"date.of.admission\",   rename = c(DOB = \"dateOfBirth\", gender = \"sex\") ) print(colnames(data)) col_name_cleaning [1] \"study_id\"                     \"event_name\"                   col_name_cleaning [3] \"country_code\"                 \"country_name\"                 col_name_cleaning [5] \"date.of.admission\"            \"dateOfBirth\"                  col_name_cleaning [7] \"date_first_pcr_positive_test\" \"sex\""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"replacing-missing-entries-with-na","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Replacing missing entries with NA","title":"Introduction to cleanepi","text":"common missing values input dataset. default, R expects missing values represented NA, However, always case dataset can contain specific character string denotes missing value. presence scenario, user can call replace_missing_values() function substitute missing values NA. make data suitable data science operations. function takes following arguments: data: input data frame linelist. target_columns: vector column names. provided, substitution missing values executed specified columns. input data linelist object, parameter can set linelist_tags wish replace missing values NA tagged columns . default value NULL .e. replace missing values across columns. na_strings: vector character strings represents missing values columns interest. default, utilizes cleanepi::common_na_strings. However, missing values string columns interest included predefined vector, can used value argument.","code":"# VISUALIZE THE PREDEFINED VECTOR OF MISSING CHARACTERS print(cleanepi::common_na_strings) default_missing_values  [1] \"missing\"       \"NA\"            \"N A\"           \"N/A\"           default_missing_values  [5] \"#N/A\"          \"NA \"           \" NA\"           \"N /A\"          default_missing_values  [9] \"N / A\"         \" N / A\"        \"N / A \"        \"na\"            default_missing_values [13] \"n a\"           \"n/a\"           \"na \"           \" na\"           default_missing_values [17] \"n /a\"          \"n / a\"         \" a / a\"        \"n / a \"        default_missing_values [21] \"NULL\"          \"null\"          \"\"              \"\\\\?\"           default_missing_values [25] \"\\\\*\"           \"\\\\.\"           \"not available\" \"Not Available\" default_missing_values [29] \"NOt available\" \"not avail\"     \"Not Avail\"     \"nan\"           default_missing_values [33] \"NAN\"           \"not a number\"  \"Not A Number\" # REPLACE ALL OCCURENCES OF \"-99\" WITH NA IN THE \"sex\" COLUMN cleaned_data <- replace_missing_values(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = \"sex\",   na_strings     = \"-99\" )  # REPLACE ALL OCCURENCES OF \"-99\" WITH NA FROM ALL COLUMNS cleaned_data <- replace_missing_values(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = NULL,   na_strings     = \"-99\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"standardizing-dates","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Standardizing Dates","title":"Introduction to cleanepi","text":"default date format R Ymd (ISO8601 format). However, common encounter date values written differently . Also, cases column data frame contains values type Date, character others. standardize_dates() function provides comprehensive set options converting date columns specified format handling various scenarios, different date formats mixed data types column. Entries processed result NA. error threshold can used define maximum number resulting NA (.e. entries without identified date) can tolerated. threshold exceeded, original vector returned. function expects following arguments: data: data frame linelist (required). target_columns: vector names columns converted (optional). provided, function attempt detect date columns perform conversion needed. format: format values specified columns (optional). provided, function attempt infer format. timeframe: expected time frame within date values fall. Values outside range set NA (optional). error_tolerance: maximum percentage NA values (non date values) can allowed converted column. Default 40% .e. 0.4. orders: character vector list codes fine-grained parsing dates. used parsing mixed dates. list supplied, list used successive tries parsing. Default : ⚠️ error_tolerance must used caution. set, percentage non-date values (NA .e. values converted date) character column greater threshold, column returned . values outside timeframe can accessed report object via out_of_range_dates element. value orders argument can modified suit user’s needs. date formats can specified . instance, want prioritize American-style dates numeric months, can switch second third elements default orders shown : function provides users flexibility standardize date columns dataset according specified requirements, including format, timeframe, error tolerance conversion character date columns. function returns input dataset (specified) columns converted Date condition met. also adds two three elements report object: data frame columns date values standardized, data frame values fall outside specified timeframe, data frame featuring date values can comply one specified format.","code":"orders <- list(   quarter_partial_dates = c(\"Y\", \"Ym\", \"Yq\"),   world_digit_months = c(\"ymd\", \"ydm\", \"dmy\", \"mdy\", \"myd\", \"dym\", \"Ymd\", \"Ydm\",                          \"dmY\", \"mdY\", \"mYd\", \"dYm\"),   world_named_months = c(\"dby\", \"dyb\", \"bdy\", \"byd\", \"ybd\", \"ydb\", \"dbY\", \"dYb\",                          \"bdY\", \"bYd\", \"Ybd\", \"Ydb\"),   us_format = c(\"Omdy\", \"YOmd\") ) # GIVE PRIORITY TO AMERICAN-STYLE DATES us_ord <- orders[c(1L, 3L, 2L)]  # ADD A FORMAT WITH HOURS TO THE EXISTING orders # THIS WILL ALLOW FOR THE CONVERSION OF VALUES SUCH AS \"2014_04_05_23:15:43\" # WHEN THEY APPEAR IN THE TARGET COLUMNS. orders$ymdhms <- c(\"Ymdhms\", \"Ymdhm\") # STANDARDIZE VALUES IN THE 'date_first_pcr_positive_test' COLUMN test_data <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                                  package = \"cleanepi\"))  head(test_data$date_first_pcr_positive_test) date_standardisation [1] \"Dec 01, 2020\" \"Jan 01, 2021\" \"Feb 11, 2021\" \"Feb 01, 2021\" \"Feb 16, 2021\" date_standardisation [6] \"May 02, 2021\"  res <- standardize_dates(   data            = test_data,   target_columns  = \"date_first_pcr_positive_test\",   format          = NULL,   timeframe       = NULL,   error_tolerance = 0.4,   orders          = list(world_named_months = c(\"Ybd\", \"dby\"),                          world_digit_months = c(\"dmy\", \"Ymd\"),                          US_formats         = c(\"Omdy\", \"YOmd\")) )"},{"path":[]},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"detecting-and-remove-incorrect-subject-ids","dir":"Articles","previous_headings":"Specific data cleaning tasks > Standardizing subject IDs","what":"Detecting and remove incorrect subject ids","title":"Introduction to cleanepi","text":"check_subject_ids() function designed identify rows input dataset ids don’t comply expected subject ids format. expects following parameters: data: data frame linelist (required). target_columns: name column containing subject IDs dataset (required). nchar: expected number character subject ids (optional). prefix: string. subject IDs specific prefix, used value argument. optional can omitted prefix. suffix: string. subject IDs specific suffix, used value argument. can ignored otherwise. range: vector two elements. expected range numbers within subject IDs, define using parameter. optional can omitted specific range. remove: logical determines whether remove incorrect subject IDs . default, wrong ids detected reported. replace , use correct_subject_ids() function described . providing parameters, function becomes versatile tool data cleaning, ensuring user alerted presence unexpected, missing duplicated subject ids. using function, make sure tailor parameters according specific requirements dataset expected characteristics subject IDs. check_subject_ids() function returns input dataset send warming incorrect ids. addition detecting undesirable subject ids, function also look missing duplicated IDs. result , report made operation might contain two extra elements: missing_ids (vector row indexes missing IDs) duplicated_ids (data frame rows duplicated IDs). Use print_report() function display report made operation.","code":"# DETECT AND REMOVE INCORRECT SUBJECT IDs res <- check_subject_ids(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = \"study_id\",   prefix         = \"PS\",   suffix         = \"P2\",   range          = c(1L, 100L),   nchar          = 7L ) subject_ids_standardisation Warning: Detected incorrect subject ids at lines: 3, 5, 7 subject_ids_standardisation Use the correct_subject_ids() function to adjust them.  # EXTRACT REPORT report <- attr(res, \"report\")  # SUMMARIZE THE REPORT OBJECT summary(report) subject_ids_standardisation                      Length Class      Mode subject_ids_standardisation incorrect_subject_id 2      data.frame list"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"correct-wrong-subject-ids","dir":"Articles","previous_headings":"Specific data cleaning tasks > Standardizing subject IDs","what":"Correct wrong subject ids","title":"Introduction to cleanepi","text":"detection incorrect subject ids using check_subject_ids(), use correct_subject_ids() replace non complying ids correct ones. function requires data frame following two columns: : column incorrect subject ids, : column values used substitute incorrect ids.","code":"# IMPORT THE INPUT DATA data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\"))  # GENERATE THE CORRECTION TABLE correction_table <- data.frame(   from = c(\"P0005P2\", \"PB500P2\", \"PS004P2-1\"),   to   = c(\"PB005P2\", \"PB050P2\", \"PS004P2\"),   stringsAsFactors = FALSE )  # PERFORM THE CORRECTION dat <- correct_subject_ids(   data             = data,   target_columns   = \"study_id\",   correction_table = correction_table )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"checking-date-sequence","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Checking date sequence","title":"Introduction to cleanepi","text":"check_date_sequence() function verifies order sequences date event columns within dataset. ensures values specified date columns follow desired chronological order. arguments accepted function: data: data frame linelist (required). target_columns: vector containing names date columns interest. columns listed expected order occurrence, reflecting chronological sequence events. example, target_columns = c(\"date_of_infection\", \"date_of_admission\", \"date_of_death\"). utilizing arguments, check_date_sequence() function facilitates validation date sequences within dataset, ensuring data integrity accuracy analysis. Additionally, offers flexibility allowing users choose whether remove rows incorrect sequences store examination report object. check_date_sequence() function returns input dataset, augmented attributes named incorrect_date_sequence rows incorrect date sequences. attribute highlights discrepancies found date sequences, enabling users take appropriate actions. Use print_report() function display report made operation.","code":"# DETECT ROWS WITH INCORRECT DATE SEQUENCE res <- check_date_sequence(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = c(\"date_first_pcr_positive_test\", \"date.of.admission\") ) check_date_order Warning: Detected 10 incorrect date sequences at line(s): 1, 2, 3, 4, 5, 6, 7, check_date_order 8, 9, 10  # EXTRACT THE REPORT report <- attr(res, \"report\")  # SUMMARIZE THE REPORT OBJECT summary(report) check_date_order                         Length Class      Mode check_date_order incorrect_date_sequence 2      data.table list"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"converting-character-columns-into-numeric","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Converting character columns into numeric","title":"Introduction to cleanepi","text":"certain scenarios, input data contains columns number written letters. instance, ages study participants can written letters. Similarly, column can contain values written numbers letters (age column values written numbers others letters). convert_to_numeric() function offers framework convert numbers written letters given column numeric. takes following arguments: data: data frame linelist (required). target_columns: vector containing names columns interest. dealing linelist, can set linelist_tags tagged columns one converted numeric. target_columns = NULL, function uses output form scan_data() function identify columns proportion numeric values least twice percentage character values. columns columns interest character values converted numeric. Note string column can converted numeric set NA resulting data. lang: character string language used performing conversion. Currently one \"en\", \"fr\", \"es\".","code":"# CONVERT THE 'age' COLUMN IN THE TEST LINELIST DATA dat <- readRDS(system.file(\"extdata\", \"messy_data.RDS\", package = \"cleanepi\")) head(dat$age, 10L) check_date_order  [1] \"37\"           \"seventy-four\" \"17\"           \"3\"            \"37\"           check_date_order  [6] NA             \"6\"            \"26\"           \"eleven\"       \"44\" dat <- convert_to_numeric(dat, target_columns = \"age\", lang = \"en\") head(dat$age, 10L) check_date_order  [1] 37 74 17  3 37 NA  6 26 11 44"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"converting-numeric-values-into-date","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Converting numeric values into date","title":"Introduction to cleanepi","text":"columns data frame might contain numeric values represents number days elapsed two events. instance, recruitment day individuals study can stored numeric column numeric values count days recruited admitted hospital. actual dates individuals recruited can retrieved using convert_numeric_to_date() function. function can take following parameters: data: input data frame linelist. target_columns: vector comma-separated list columns names converted numeric date. input data linelist object, parameter can set linelist_tags tagged variables target columns. ref_date: reference date forward: Boolean indicates whether counts started reference date (TRUE) (FALSE). default TRUE. function returns input data values target columns(s) converted Date. enables usage {cleanepi}’s functions operates Date columns well powerful functions can used manipulate Dates {base} R {lubridate} packages.","code":"data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")) %>%   standardize_dates(target_columns = \"date.of.admission\")  # CREATE THE RECRUITMENT DATE COLUMNS data$recruitment_date <- sample(20:50, nrow(data), replace = FALSE)  # RETRIVE THE DATE INDIVIDUALS WERE RECRUITED data <- convert_numeric_to_date(   data           = data,   target_columns = \"recruitment_date\",   ref_date       = \"date.of.admission\",   forward        = TRUE )  # RETRIVE THE DATE INDIVIDUALS WERE RECRUITED data <- convert_numeric_to_date(   data           = data,   target_columns = \"recruitment_date\",   ref_date       = as.Date(\"2019-10-13\"),   forward        = FALSE )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"finding-duplicated-rows","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Finding duplicated rows","title":"Introduction to cleanepi","text":"find_duplicates() function serves purpose identifying duplicated rows within given dataset. accepts following parameters: data: input data frame linelist. target_columns: vector containing either column names column indices duplicated rows identified. NULL passed, duplicates detected across columns dataset. Notably, input dataset linelist object, target_columns can set linelist_tags specifically identify duplicates across tagged variables . leveraging find_duplicates() function appropriate parameters, users can efficiently pinpoint duplicated rows within datasets, either across columns selectively across tagged variables linelist object. Upon execution, find_duplicates() function identifies duplicated rows either based columns specified, stores report. addition existing columns, appends two extra columns dataset: row_id: Contains indexes duplicated rows original input dataset. group_id: Contains unique identifiers assigned duplicated group, defined set rows sharing identical values designated columns interest. including extra columns, users gain insights specific rows identified duplicates corresponding group identifiers, enabling efficient analysis management duplicated data within dataset.","code":"# IMPORT A `linelist` DATA data <- readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                             package = \"cleanepi\"))  # SHOW THE TAGGED VARIABLES linelist::tags(data) $date_onset [1] \"dt_onset\"  $date_reporting [1] \"dt_report\"  $gender [1] \"sex\"  $outcome [1] \"outcome\"  # FIND DUPLICATES ACROSS ALL COLUMNS EXCEPT THE SUBJECT IDs COLUMN all_columns    <- names(data) target_columns <- all_columns[all_columns != \"id\"] dups           <- find_duplicates(data           = data,                                   target_columns = target_columns) No duplicates were found.  # FIND DUPLICATES ACROSS TAGGED VARIABLES dups <- find_duplicates(   data           = data,   target_columns = \"linelist_tags\" ) Found 57 duplicated rows in the dataset. Please consult the report for more details. # VISUALIZE THE DUPLICATES report     <- attr(dups, \"report\") duplicates <- report$duplicated_rows duplicates %>%   kableExtra::kbl() %>%   kableExtra::kable_paper(\"striped\", font_size = 14, full_width = FALSE) %>%   kableExtra::scroll_box(height = \"200px\", width = \"100%\",                          box_css = \"border: 1px solid #ddd; padding: 5px; \",                          extra_css = NULL,                          fixed_thead = TRUE)"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"removing-duplicates","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Removing duplicates","title":"Introduction to cleanepi","text":"eliminate duplicated rows dataset, remove_duplicates() function can employed. function internally utilizes find_duplicates() function expects following parameters: data: data frame linelist duplicated rows removed. target_columns: vector containing either column names indices specifying columns duplicated rows identified. set NULL, function detect duplicates across columns. input dataset linelist object, setting parameter linelist_tags identify duplicates across tagged variables . Upon execution, remove_duplicates() function returns input dataset without duplicated rows removed (found). details duplicates removal operation stored report object attached output object. duplicates found, report contain following elements: duplicated_rows: data frame detected duplicates. removed_duplicates: data frame duplicated rows removed. duplicates_checked_from: vector column names duplicates identified. examining elements within report, users gain insights specific duplicated rows, removed, columns used identify duplicates, thus facilitating transparency documentation duplicates removal process. Use print_report() function display report made operation. output find_duplicates() function can also passed remove_duplicates() function specify duplicated rows removed.","code":"# REMOVE DUPLICATE ACROSS TAGGED COLUMNS ONLY. res <- remove_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = \"linelist_tags\" ) #> Found 57 duplicated rows in the dataset. Please consult the report for more details. # ACCESS THE REPORT report <- attr(res, \"report\")  # SUMMARIZE THE REPORT OBJECT summary(report)                         Length Class      Mode      duplicated_rows         6      grouped_df list      duplicates_checked_from 1      -none-     character removed_duplicates      5      grouped_df list # DETECT DUPLICATES FROM TAGGED COLUMNS dups <- find_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = \"linelist_tags\" ) find_and_remove_dups Found 57 duplicated rows in the dataset. Please consult the report for more details.  # EXTRACT THE DUPLICATES report     <- attr(dups, \"report\") duplicates <- report$duplicated_rows  # REMOVE FIRST OCCURRENCE OF DUPLICATED ROWS dups_index_to_remove <- duplicates[[\"row_id\"]][seq(1L, nrow(dups), 2L)] dups_index_to_remove <- dups_index_to_remove[!is.na(dups_index_to_remove)] no_dups <- data[-dups_index_to_remove, ]"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"dictionary-based-data-substituting","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Dictionary based data substituting","title":"Introduction to cleanepi","text":"clean_using_dictionary() function offers convenient way replace options data frame linelist corresponding values stored data dictionary. function expects following arguments: data: input data frame linelist contains options replaced. dictionary: data frame data dictionary contains complete labels options. structure data dictionary file adhere standards expected matchmaker package, clean_using_dictionary() function relies functions package. add_to_dictionary() function useful tool expanding coverage data dictionary defining options present input data originally included dictionary. function enables users dynamically update dictionary accommodate new values encountered dataset. addition current data dictionary function takes arguments defined : option, value, grp, order: values options added data dictionary. example shows function used. employing add_to_dictionary() function, users can ensure data dictionary remains comprehensive aligned evolving nature input dataset, thereby enhancing accuracy completeness data interpretation analysis. example , add -99 test data dictionary, test_dictionary.","code":"# READING IN THE DATA data <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                             package = \"cleanepi\"))  # ADD THE EXTRA OPTION TO THE DICTIONARY test_dictionary <- add_to_dictionary(test_dictionary,                                       option = \"-99\",                                       value  = \"unknow\",                                       grp    = \"sex\",                                       order  = NULL) # PERFORM THE DICTIONARY-BASED SUBSTITUTION cleaned_df <- clean_using_dictionary(   data       = data,   dictionary = test_dictionary )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"calculating-time-span-in-different-time-scales-years-months-weeks-or-days","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Calculating time span in different time scales (“years”, “months”, “weeks”, or “days”)","title":"Introduction to cleanepi","text":"timespan() function computes time span two elements type Date. resulting time span can expressed “years”, “months”, “weeks”, “days”, depending user-specified unit. functions can take following arguments: data: input dataset (required). target_column: string name target column (require). values column expected form Ymd .e. 2024-01-31. time span calculated values end_date defined . end_date: can either character name another column type Date input data vector Date values single Date value (required). also ISO8601 format (“2024-01-31”) default value today’s date Sys.Date(). span_unit: parameter determines unit time span expressed (required). can calculated “years”, “months”, “weeks”, “days”. default, time span calculated “years” parameter provided. span_column_name: string name column added input data. default span. span_remainder_unit: parameter used determine unit remainder time span calculation returned. possible units : “days” “weeks” “months”. default, function returns decimal age .e. span_remainder_unit = NULL. arguments, function offers flexibility determining time span different units. facilitates various analytics tasks time span computation necessary component, providing users ability customize output according specific requirements. timespan() function augments input dataset adding one two extra columns containing age-related information. additional columns follows: Calculated time span specified scale: Contains calculated time span specified unit (“years”, “months”, “weeks”, “days”). Remaining number days: Indicates remaining number “days” “weeks” “months” calculating time span, representing fractional part time span calculation. column included needed, provides additional granularity time span representation.","code":"# IMPORT DATA, REPLACE MISSING VALUES WITH 'NA' & STANDARDIZE DATES data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")) %>%   replace_missing_values(target_columns = \"dateOfBirth\",                          na_strings     = \"-99\") %>%   standardize_dates(target_columns  = \"dateOfBirth\",                     error_tolerance = 0.0,                     format = \"%m/%d/%Y\") # nolint: nonportable_path_linter. #> Warning: Using %m/%d/%Y to standardize target columns...  # CALCULATE INDIVIDUAL AGE IN YEARS FROM THE 'dateOfBirth' COLUMN AND SEND THE # REMAINDER IN MONTHS age <- timespan(   data                = data,   target_column       = \"dateOfBirth\",   end_date            = Sys.Date(),   span_unit           = \"years\",   span_column_name    = \"age_in_years\",   span_remainder_unit = \"months\" )  # CALCULATE THE TIME SPAN IN YEARS BETWEEN INDIVIDUALS 'dateOfBirth' AND THE DAY # THEY TESTED POSITIVE data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")) data <- data %>%   replace_missing_values(     target_columns = \"dateOfBirth\",     na_strings = \"-99\"   ) %>%   standardize_dates(     target_columns = c(\"date_first_pcr_positive_test\", \"date.of.admission\"),     error_tolerance = 0.0,     format = NULL   ) %>%   timespan(     target_column = \"date.of.admission\",     end_date = \"date_first_pcr_positive_test\",     span_unit = \"years\",     span_column_name = \"elapsed_time\",     span_remainder_unit = NULL   )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"printing-the-report","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Printing the report","title":"Introduction to cleanepi","text":"","code":"print_report(   data             = data,   report_title     = \"{cleanepi} data cleaning report\",   output_directory = \".\",   output_filename  = \"cleaning_report\",   format           = \"html\",   print            = TRUE )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"concept-and-motivation","dir":"Articles","previous_headings":"","what":"Concept and motivation","title":"Package Design vignette for {cleanepi}","text":"document, outline design decisions steered development strategies {cleanepi} R package, along rationale behind decision potential advantages disadvantages associated . Data cleaning important phase ensuring efficacy downstream analysis. procedures entailed cleaning process may differ based data type research objectives. Nonetheless, certain steps can applied universally across diverse data types, irrespective origin.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"design-decisions","dir":"Articles","previous_headings":"","what":"Design decisions","title":"Package Design vignette for {cleanepi}","text":"{cleanepi} R package designed offer functional programming-style data cleansing tasks. streamline organization data cleaning operations, categorized distinct groups referred modules. modules based overarching goals derived commonly anticipated data cleaning procedures. module features primary function along additional helper functions tailored accomplish specific tasks. ’s important note , except cases outcome helper function can impact cleaning task, main function module exported. deliberate choice empowers users execute individual cleaning tasks needed, enhancing flexibility usability. core {cleanepi}, pivotal function clean_data() serves wrapper encapsulating modules, illustrated figure . function intended primary entry point users seeking cleanse data. performs cleaning operations requested user set parameters need explicitly defined. Furthermore, multiple cleaning operations can performed sequentially using “pipe” operator (%>%). addition, package also two surrogate functions: date values either Date numeric format (date column imported MS Excel), character values logical column (available within column TRUE FALSE), numbers written letters. input data contains character columns, function returns data frame number row character columns six columns representing column names, proportion missing, numeric, date, character, logical values respectively. transpose result relative input dataset (columns input returned row) avoid horizontal scrolling case datasets large number character columns. sum proportion across columns always equal 1 reason : * numeric values found character column, subjected followings: 1. conversion Date using lubridate::as_date() origin = .Date(\"1900-01-01\"). 2. conversion Date using date_guess() function used standardize_dates() function. Numeric values successfully converted date either methods considered potential dates. added date count fall within interval [50 years back today’s date, today’s date]. ambiguity columns type Date, logical, numeric. Values columns expected type. Hence, function applied columns character columns. Consequently, invisibly returns NA applied dataset character columns, printing message absence character columns input dataset. print_report(): utilizing function, users can visualize report generated applied cleaning task, facilitating transparency understanding data cleaning process.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Package Design vignette for {cleanepi}","text":"{cleanepi} R package crafted clean, curate, standardize tabular datasets, particular focus epidemiological data. architecture {cleanepi}, data cleaning operations categorized modules, provides specific data cleaning task. modules current version {cleanepi} encompass : standardization column names, detection removal duplicates, replacement missing values NA, standardization subject IDs, standardization date values, replacement existing values predefined ones (dictionary based substitutions), conversion values necessary, verification sequence order date-events, transformation selected columns. compartmentalizing operations modules, {cleanepi} offers users systematic adaptable framework address diverse data cleaning needs, especially within realm epidemiological datasets.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Package Design vignette for {cleanepi}","text":"primary functions modules, well core function clean_data(), accept input form data.frame linelist. offers flexibility users regarding want position {cleanepi} within R package ecosystem epidemic analysis pipelines, either clean data converting linelist. addition target dataset, core function clean_data() accepts list operations executed dataset. subsequently invokes primary functions specified module.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Package Design vignette for {cleanepi}","text":"primary functions modules core function clean_data() return object type data.frame linelist, depending type input dataset. report generated cleaning tasks attached object attribute, can accessed using either attr() attributes() functions base R.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"modules-in-cleanepi","dir":"Articles","previous_headings":"Output","what":"Modules in {cleanepi}","title":"Package Design vignette for {cleanepi}","text":"section, provide detailed description way every module built. 1. Standardization column names module designed standardize style format column names within target dataset, offering users flexibility specify subset : focal columns preserve original format, columns renamed .e. given new name chosen user. Main function: standardize_column_names() Input: data.frame linelist object. Optionally, vector focal column names vector column names renamed form new_name = \"old_name\". provided, columns undergo standardization. Output: input object standardized column names. Report: two-column table displaying initial current column names updated column original dataset. Mode: Explicit incorporating standardize_column_names() function, {cleanepi} streamlines process ensuring consistency clarity column naming conventions, thereby enhancing overall organization readability dataset. 2. Removal empty rows columns constant columns module aims eliminating irrelevant redundant rows columns, including empty rows columns well constant columns. Main function: remove_constants() cut-determines percent missing values beyond row column deleted. Output: Returns input object applying specified operations. list one two three vector(s) showcasing detected empty rows, empty columns constant columns. explicit 3. Detection removal duplicates module designed identify eliminate duplicated rows. Main functions: find_duplicates(), remove_duplicates() Vector target columns (default consider columns; possible use linelist_tags consider tagged variables input linelist object). Output: Returns input object applying specified operations. list one two table(s) showcasing found duplicates removed duplicates. explicit remove_duplicates() function, users can streamline dataset eliminating redundant rows, thus enhancing data integrity analysis efficiency. 4. Replacement missing values NA module aims standardize unify representation missing values within dataset. Main function: replace_missing_values() vector column names (provided, operation performed across columns) string vector strings representing current missing values (default value cleanepi::common_na_strings) Output: Returns input object missing values represented NA. Report: Generates three-column table featuring index, column, value missing item dataset. explicit utilizing replace_missing_char() function, users can ensure consistency handling missing values across dataset, facilitating accurate analysis interpretation data. 5. Standardization date values module dedicated convert date values character columns ISO8601 Date format, ensuring dates fall within expected user-provided timeframe. Main function: standardize_dates() vector targeted date columns (automatically determined provided) Tolerance threshold defines % missing (range values converted NA) values allowed converted column. % missing values exceeds equal , original values returned (default value 40%) format (default value NULL) timeframe (default value null) Output: Returns input object standardized date values formatted %Y-%m-%d. two-column table listing columns date values standardized. three-column table featuring index, column name, values fall outside specified timeframe. data frame featuring date values can comply one specified format. Users can update standardized date values correct ones ’s appropriated. explicit employing standardize_dates() function, users can ensure uniformity coherence date formats across dataset, also validating temporal integrity data within defined timeframe. 6. Standardization subject IDs module tailored verify whether values column uniquely identifying subjects adhere consistent format. also offers functionality allow users correct inconsistent subject ids. Main function: check_subject_ids() name ID column Strings prefix, suffix, numerical range within IDs numeric representing expected number characters subject ids. Output: Returns input object attached attribute called incorrect_subject_id. Report: Generates two-column table featuring index value subject ID deviates expected format. explicit correct_subject_ids() function can used correct identified incorrect subject ids. addition input data, expects data frame two columns containing wrong correct ids respectively. utilizing functions module, users can ensure uniformity format subject ids, facilitating accurate tracking analysis individual subjects within dataset. 7. Dictionary based substitution module facilitates dictionary-based substitution, involves replacing existing values predefined ones. replaces entries specific columns certain values, substituting 1 “male” 2 “female” gender column. also interoperates seamlessly get_meta_data() function {readepi} R package. Note clean_using_dictionary() function return warning detects unexpected values target columns data dictionary. unexpected values can added data dictionary using add_to_dictionary() function. Main function: clean_using_dictionary() Input: Accepts data.frame linelist object, along data dictionary featuring following column names: options, values, order. Output: Returns input object specified options replaced corresponding values. Report: Generates three-column table index, column, value unexpected value encountered targeted column. explicit leveraging clean_using_dictionary() function, users can streamline standardize values within specific columns based predefined mappings, enhancing consistency accuracy dataset. 8. Conversion values necessary module designed convert numbers written letters numerical values, ensuring interoperability {numberize} package. Main function: convert_to_numeric() vector column names converted numeric. provided, target columns returned scan_data() function string denotes language used text. current version supports English, French Spanish. Output: Returns input object values target columns converted numeric format. Report: Generates three-column table index, column, value unrecognized value dataset (strings converted numeric). explicit employing convert_to_numeric() function, users can seamlessly transform numeric representations written letters numerical values, ensuring compatibility {numberize} package promoting accuracy numerical analysis. 9. Verification sequence date-events module provides functions verify whether sequence date events aligns expectations. instance, can flag rows date admission hospital precedes individual’s date birth. Main function: check_date_sequence() vector date column names considered Output: Returns input object incorrect rows removed. Report: Generates table listing incorrect rows specified columns. explicit using check_date_sequence() function, users can systematically validate ensure coherence date sequences within dataset, promoting accuracy reliability subsequent analyses. 10. Transformation selected columns module dedicated performing various specialized operations related epidemiological data analytics. current version package, module includes following functions: Main function: timespan() name column interest reference date value column time remainder units (possible values days, weeks, months, years) names newly generated columns Output: Returns input object clean data one two additional columns values specified time unit. Report: None. explicit leveraging timespan() function, users can efficiently compute integrate time span information epidemiological dataset based user-defined parameters, enhancing analytics capabilities dataset.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"surrogate-functions","dir":"Articles","previous_headings":"Output","what":"Surrogate functions","title":"Package Design vignette for {cleanepi}","text":"scan_data(): function designed generate quick summary dataset, offering insights composition column. calculates percentage values belonging different data types character, numeric, missing, logical, date. summary can help analysts data scientists understand structure content dataset glance. print_report(): function used displaying report detailing result cleaning operations executed dataset. likely presents information data cleaning processes performed, handling missing values, correcting data types, removing duplicates, transformations applied ensure data quality integrity. surrogate functions play crucial roles data analysis cleaning workflow, providing valuable information documentation dataset characteristics steps taken prepare analysis modelling.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"related-packages","dir":"Articles","previous_headings":"","what":"Related packages","title":"Package Design vignette for {cleanepi}","text":"{janitor}, {matchmaker}, {naniar}, {daiquiri} {epiCleanr} {matchmaker}","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Package Design vignette for {cleanepi}","text":"modules surrogate functions depend mainly following packages: {numberize} used conversion number character numeric, {dplyr} used many way including filtering, column creation, data summary, etc, {magrittr} used %>% operator, {linelist} used perform operations linelist-type input objects, {janitor} used removal constant data (empty rows columns, well constant columns), {matchmaker} utilized perform dictionary-based cleaning, {lubridate} used create, handle, manipulate objects type Date, {reactable} mainly used customize data cleaning report, {snakecase} used standardizing column names transform everything snake-case except specified otherwise, {withr} utilized handle creation temporary files directory relevant print_report() , {readr} used import data. functions require packages needed package development process including: {checkmate}, {kableExtra}, {bookdown}, {rmarkdown}, {testthat} (>= 3.0.0), {knitr}, {lintr}","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"contribute","dir":"Articles","previous_headings":"","what":"Contribute","title":"Package Design vignette for {cleanepi}","text":"special requirements contributing {cleanepi}, please follow package contributing guide.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karim Mané. Author, maintainer. Thibaut Jombart. Contributor.           Thibault contributed development date_guess(). Abdoelnaser Degoot. Author. Bankolé Ahadzie. Author. Nuredin Mohammed. Author. Bubacarr Bah. Author. Hugo Gruson. Contributor, reviewer. Pratik R. Gupte. Reviewer. James M. Azam. Reviewer. Joshua W. Lambert. Reviewer. Chris Hartgerink. Reviewer. London School Hygiene Tropical Medicine, LSHTM. Copyright holder. data.org. Funder.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mané K, Degoot , Ahadzie B, Mohammed N, Bah B (2024). cleanepi: Clean Standardize Epidemiological Data. doi:10.5281/zenodo.11473985, https://epiverse-trace.github.io/cleanepi/.","code":"@Manual{,   title = {cleanepi: Clean and Standardize Epidemiological Data},   author = {Karim Mané and Abdoelnaser Degoot and Bankolé Ahadzie and Nuredin Mohammed and Bubacarr Bah},   year = {2024},   doi = {10.5281/zenodo.11473985},   url = {https://epiverse-trace.github.io/cleanepi/}, }"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"cleanepi-clean-and-standardize-epidemiological-data-","dir":"","previous_headings":"","what":"Clean and Standardize Epidemiological Data","title":"Clean and Standardize Epidemiological Data","text":"cleanepi R package designed cleaning, curating, standardizing epidemiological data. streamlines various data cleaning tasks typically expected working datasets epidemiology. Key functionalities cleanepi include: Removing irregularities: removes duplicated empty rows columns, well columns constant values. Handling missing values: replaces missing values standard NA format, ensuring consistency ease analysis. Ensuring data integrity: ensures uniqueness uniquely identified columns, thus maintaining data integrity preventing duplicates. Date conversion: offers functionality convert character columns Date format specific conditions, enhancing data uniformity facilitating temporal analysis. also offers conversion numeric values written letters numbers. Standardizing entries: can standardize column entries specified formats, promoting consistency across dataset. Time span calculation: calculates time span two elements type Date, providing valuable demographic insights epidemiological analysis. cleanepi operates data frames similar structures like tibbles, well linelist objects commonly used epidemiological research. returns processed data format, ensuring seamless integration existing workflows. Additionally, generates comprehensive report detailing outcomes cleaning task. cleanepi developed Epiverse-TRACE team Medical Research Council Gambia unit London School Hygiene Tropical Medicine.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clean and Standardize Epidemiological Data","text":"cleanepi can installed CRAN using latest development version cleanepi can installed GitHub.","code":"install.packages(\"cleanepi\") if (!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/cleanepi\") library(cleanepi)"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Clean and Standardize Epidemiological Data","text":"main function cleanepi clean_data(), internally makes call almost standard data cleaning functions, removal empty duplicated rows columns, replacement missing values, etc. However, function can also called independently perform specific task. mechanism explained details vignette. typical example use clean_data() function.","code":"# READING IN THE TEST DATASET test_data <- readRDS(   system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\") ) # READING IN THE DATA DICTIONARY test_dictionary <- readRDS(   system.file(\"extdata\", \"test_dictionary.RDS\", package = \"cleanepi\") ) # DEFINING THE CLEANING PARAMETERS use_na <- list(target_columns = NULL, na_strings = \"-99\") remove_duplicates <- list(target_columns   = NULL) standardize_dates <- list(   target_columns = NULL,   error_tolerance = 0.4,   format = NULL,   timeframe = as.Date(c(\"1973-05-29\", \"2023-05-29\")),   orders = list(     world_named_months = c(\"Ybd\", \"dby\"),     world_digit_months = c(\"dmy\", \"Ymd\"),     US_formats = c(\"Omdy\", \"YOmd\")   ) ) standardize_subject_ids <- list(   target_columns = \"study_id\",   prefix = \"PS\",   suffix = \"P2\",   range = c(1, 100),   nchar = 7 ) remove_cte <- list(cutoff = 1) standardize_col_names <- list(   keep = \"date.of.admission\",   rename = c(DOB = \"dateOfBirth\") ) to_numeric <- list(   target_columns = \"sex\",   lang = \"en\" )  params <- list(   standardize_column_names = standardize_col_names,   remove_constants = remove_cte,   replace_missing_values = use_na,   remove_duplicates = remove_duplicates,   standardize_dates = standardize_dates,   standardize_subject_ids = standardize_subject_ids,   to_numeric = to_numeric,   dictionary = test_dictionary ) # PERFORMING THE DATA CLEANING cleaned_data <- clean_data(   data = test_data,   params = params ) #>  #> cleaning column names #> replacing missing values with NA #> removing the constant columns, empty rows and columns #> removing duplicated rows #> No duplicates were found. #> standardising date columns #> checking subject IDs format #> Warning: Detected incorrect subject ids at lines: 3, 5, 7 #> Use the correct_subject_ids() function to adjust them. #> converting sex, en into numeric #> performing dictionary-based cleaning # EXTRACT THE DATA CLEANING REPORT report <- attr(cleaned_data, \"report\") # DISPLAY THE DATA CLEANING REPORT print_report(report)"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Clean and Standardize Epidemiological Data","text":"","code":"browseVignettes(\"cleanepi\")"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"lifecycle","dir":"","previous_headings":"Vignette","what":"Lifecycle","title":"Clean and Standardize Epidemiological Data","text":"package currently experimental, defined RECON software lifecycle. means functional, interfaces functionalities may change time, testing documentation may lacking.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"contributions","dir":"","previous_headings":"Vignette","what":"Contributions","title":"Clean and Standardize Epidemiological Data","text":"Contributions welcome via pull requests.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"code-of-conduct","dir":"","previous_headings":"Vignette","what":"Code of Conduct","title":"Clean and Standardize Epidemiological Data","text":"Please note cleanepi project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"citing-this-package","dir":"","previous_headings":"","what":"Citing this package","title":"Clean and Standardize Epidemiological Data","text":"","code":"citation(\"cleanepi\") #> To cite package 'cleanepi' in publications use: #>  #>   Mané K, Degoot A, Ahadzie B, Mohammed N, Bah B (2024). _cleanepi: #>   Clean and Standardize Epidemiological Data_. #>   doi:10.5281/zenodo.11473985 #>   <https://doi.org/10.5281/zenodo.11473985>, #>   <https://epiverse-trace.github.io/cleanepi/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {cleanepi: Clean and Standardize Epidemiological Data}, #>     author = {Karim Mané and Abdoelnaser Degoot and Bankolé Ahadzie and Nuredin Mohammed and Bubacarr Bah}, #>     year = {2024}, #>     doi = {10.5281/zenodo.11473985}, #>     url = {https://epiverse-trace.github.io/cleanepi/}, #>   }"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an element to the data dictionary — add_to_dictionary","title":"Add an element to the data dictionary — add_to_dictionary","text":"Add element data dictionary","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an element to the data dictionary — add_to_dictionary","text":"","code":"add_to_dictionary(dictionary, option, value, grp, order = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an element to the data dictionary — add_to_dictionary","text":"dictionary data frame data dictionary option vector strings new options need added dictionary. value vector values used replacing new options. grp vector name column contains option interest. order numeric order new option.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an element to the data dictionary — add_to_dictionary","text":"object type data frame. new data dictionary additional line contains details new options.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an element to the data dictionary — add_to_dictionary","text":"","code":"test <- add_to_dictionary(   dictionary = readRDS(system.file(\"extdata\", \"test_dict.RDS\",                        package = \"cleanepi\")),   option     = \"ml\",   value      = \"male\",   grp        = \"gender\",   order      = NULL  )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an element to the report object — add_to_report","title":"Add an element to the report object — add_to_report","text":"Add element report object","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an element to the report object — add_to_report","text":"","code":"add_to_report(x, key, value = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an element to the report object — add_to_report","text":"x data frame  linelist key name cleaning operation value object add report object","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an element to the report object — add_to_report","text":"input report object additional element","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an element to the report object — add_to_report","text":"","code":"# scan through the data scan_res <- scan_data(data = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                                  package = \"cleanepi\")))  # Perform data cleaning cleaned_data <- clean_data(   data   = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                package = \"cleanepi\")),   params = list(     to_numeric = list(target_columns = \"sex\", lang = \"en\"),     dictionary = NULL   ) ) #> converting sex, en into numeric  # add the data scanning result to the report cleaned_data <- add_to_report(x     = cleaned_data,                               key   = \"scanning_result\",                               value = scan_res)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the order of the sequence of date-events is valid — check_date_sequence","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"Checks whether date sequence vector  specified columns order .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"","code":"check_date_sequence(data, target_columns)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"data data frame target_columns vector event column names. Users specify least 2 column names expected order. example: target_columns = c(\"date_symptoms_onset\", \"date_hospitalization\", \"date_death\"). input data linelist object, parameter can set linelist_tags wish date sequence across tagged columns . values column ISO8601 format (2024-12-31). Otherwise, use standardize_dates() function standardize .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"input dataset. found, incorrect date sequences stored report can accessed using attr(data, \"report\").","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether the order of the sequence of date-events is valid — check_date_sequence","text":"","code":"# import the data data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\"))  # standardize the date values data <- data %>%   standardize_dates(     target_columns  = c(\"date_first_pcr_positive_test\", \"date.of.admission\"),     error_tolerance = 0.4,     format          = NULL,     timeframe       = NULL   )  good_date_sequence <- check_date_sequence(   data           = data,   target_columns = c(\"date_first_pcr_positive_test\", \"date.of.admission\") ) #> Warning: Detected 2 incorrect date sequences at line(s): 6, 8"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the subject IDs comply with the expected format. When incorrect IDs are found, the function sends a warning and the user can call the correct_subject_ids() function to correct them. — check_subject_ids","title":"Check whether the subject IDs comply with the expected format. When incorrect IDs are found, the function sends a warning and the user can call the correct_subject_ids() function to correct them. — check_subject_ids","text":"Check whether subject IDs comply expected format. incorrect IDs found, function sends warning user can call correct_subject_ids() function correct .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the subject IDs comply with the expected format. When incorrect IDs are found, the function sends a warning and the user can call the correct_subject_ids() function to correct them. — check_subject_ids","text":"","code":"check_subject_ids(   data,   target_columns,   prefix = NULL,   suffix = NULL,   range = NULL,   nchar = NULL )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the subject IDs comply with the expected format. When incorrect IDs are found, the function sends a warning and the user can call the correct_subject_ids() function to correct them. — check_subject_ids","text":"data input data frame linelist target_columns vector column names subject ids. prefix prefix used subject IDs suffix suffix used subject IDs range vector range numbers sample IDs nchar integer represents expected number characters subject ids.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the subject IDs comply with the expected format. When incorrect IDs are found, the function sends a warning and the user can call the correct_subject_ids() function to correct them. — check_subject_ids","text":"input dataset warning incorrect subject ids found","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether the subject IDs comply with the expected format. When incorrect IDs are found, the function sends a warning and the user can call the correct_subject_ids() function to correct them. — check_subject_ids","text":"","code":"dat <- check_subject_ids(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = \"study_id\",   prefix         = \"PS\",   suffix         = \"P2\",   range          = c(1, 100),   nchar          = 7 ) #> Warning: Detected incorrect subject ids at lines: 3, 5, 7 #> Use the correct_subject_ids() function to adjust them."},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids_oness.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the uniqueness in values of the sample IDs column — check_subject_ids_oness","title":"Checks the uniqueness in values of the sample IDs column — check_subject_ids_oness","text":"Checks uniqueness values sample IDs column","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids_oness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the uniqueness in values of the sample IDs column — check_subject_ids_oness","text":"","code":"check_subject_ids_oness(data, id_col_name)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids_oness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the uniqueness in values of the sample IDs column — check_subject_ids_oness","text":"data input data frame id_col_name name column contains sample IDs","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids_oness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the uniqueness in values of the sample IDs column — check_subject_ids_oness","text":"input data frame extra element attributes missing duplicated IDs.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and standardize data — clean_data","title":"Clean and standardize data — clean_data","text":"Cleans messy data frames performing several operations. include among others: cleaning column names, detecting removing duplicates, empty records columns, constant columns, replacing missing values NA, converting character columns dates contain certain number date values, detecting subject IDs wrong formats, etc.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and standardize data — clean_data","text":"","code":"clean_data(data, params)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and standardize data — clean_data","text":"data input data frame linelist params list parameters define cleaning operations applied input data. default parameters defined cleanepi::default_cleanepi_settings(). possible values : standardize_column_names: list arguments needed standardize column names. elements list input standardize_column_names function. replace_missing_values: list parameters used replacing missing values NA. elements list inputs replace_missing_values function. remove_duplicates: list arguments define columns parameters considered looking duplicates. input values remove_duplicatesfunction. remove_constants: list parameters define whether remove constant data . values input remove_constants function. standardize_dates: list parameters used standardize date values input data. represent input values standardize_dates function. standardize_subject_ids: list parameters needed check IDs comply expect format. arguments input values check_subject_ids. to_numeric: list parameters needed convert specified columns numeric. provided, parameters input values convert_to_numeric dictionary: data frame used substitute current values specified columns dictionary. main argument clean_using_dictionary function. check_date_sequence: list arguments used determining whether sequence date events respected across rows input data. value list input check_date_sequence function.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and standardize data — clean_data","text":"cleaned input date according user-specified parameters. associated data cleaning report can accessed using attr(cleaned_data, \"report\")","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and standardize data — clean_data","text":"","code":"# Parameters for column names standardization standardize_col_names <- list(keep = NULL, rename = NULL)  # parameters to remove constant columns, empty rows and columns remove_cte <- list(cutoff = 1)  # Parameters for substituting missing values with NA: replace_missing_values <- list(target_columns = NULL, na_strings = \"-99\")  # Parameters for duplicates removal across all columns remove_duplicates <- list(target_columns   = NULL)  # Parameters for dates standardization standardize_dates <- list(   target_columns = NULL,   error_tolerance = 0.4,   format = NULL,   timeframe = as.Date(c(\"1973-05-29\", \"2023-05-29\")),   orders = list(     world_named_months = c(\"Ybd\", \"dby\"),     world_digit_months = c(\"dmy\", \"Ymd\"),     US_formats = c(\"Omdy\", \"YOmd\")   ) )  # Parameters for subject IDs standardization standardize_subject_ids <- list(   target_columns = \"study_id\",   prefix = \"PS\",   suffix = \"P2\",   range = c(1, 100),   nchar = 7 )  to_numeric <- list(target_columns = \"sex\", lang = \"en\")  # the dictionary-based cleaning will not be performed here dictionary = NULL  cleaned_data <- clean_data(   data = readRDS(     system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")   ),   params = list(     standardize_column_names = standardize_col_names,     remove_constants = remove_cte,     replace_missing_values = replace_missing_values,     remove_duplicates = remove_duplicates,     standardize_dates = standardize_dates,     standardize_subject_ids = standardize_subject_ids,     to_numeric = to_numeric,     dictionary = dictionary   ) ) #>  #> cleaning column names #> replacing missing values with NA #> removing the constant columns, empty rows and columns #> removing duplicated rows #> No duplicates were found. #> standardising date columns #> checking subject IDs format #> Warning: Detected incorrect subject ids at lines: 3, 5, 7 #> Use the correct_subject_ids() function to adjust them. #> converting sex, en into numeric"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform dictionary-based cleaning — clean_using_dictionary","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"Perform dictionary-based cleaning","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"","code":"clean_using_dictionary(data, dictionary)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"data data frame dictionary data dictionary associated input data.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"data frame cleaned values target columns specified data dictionary.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"","code":"data           <- readRDS(system.file(\"extdata\", \"messy_data.RDS\",                                       package = \"cleanepi\")) data$gender[2] <- \"homme\" cleaned_df     <- clean_using_dictionary(   data       = data,   dictionary = readRDS(system.file(\"extdata\", \"test_dict.RDS\",                                    package = \"cleanepi\")) ) #>  #> Detected misspelled values at lines 2 of column 'gender' #> Please add the misspelled options to the data dictionary using the add_to_dictionary() function."},{"path":"https://epiverse-trace.github.io/cleanepi/reference/cleanepi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cleanepi: Clean and Standardize Epidemiological Data — cleanepi-package","title":"cleanepi: Clean and Standardize Epidemiological Data — cleanepi-package","text":"Cleaning standardizing tabular data package, tailored specifically curating epidemiological data. streamlines various data cleaning tasks typically expected working datasets epidemiology. returns processed data format, ensuring seamless integration existing workflows. Additionally, generates comprehensive report detailing outcomes cleaning task.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/cleanepi/reference/cleanepi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cleanepi: Clean and Standardize Epidemiological Data — cleanepi-package","text":"Maintainer: Karim Mané karim.mane@lshtm.ac.uk (ORCID) Authors: Abdoelnaser Degoot abdoelnaser-mahmood.degoot@lshtm.ac.uk (ORCID) Bankolé Ahadzie Bankole.Ahadzie@lshtm.ac.uk Nuredin Mohammed Nuredin.Mohammed@lshtm.ac.uk Bubacarr Bah Bubacarr.Bah1@lshtm.ac.uk (ORCID) contributors: Thibaut Jombart thibautjombart@gmail.com (Thibault contributed development date_guess().) [contributor] Hugo Gruson hugo@data.org (ORCID) [contributor, reviewer] Pratik R. Gupte pratik.gupte@lshtm.ac.uk (ORCID) [reviewer] James M. Azam james.azam@lshtm.ac.uk (ORCID) [reviewer] Joshua W. Lambert joshua.lambert@lshtm.ac.uk (ORCID) [reviewer] Chris Hartgerink chris@data.org (ORCID) [reviewer] London School Hygiene Tropical Medicine, LSHTM [copyright holder] data.org [funder]","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/common_na_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Common strings representing missing values — common_na_strings","title":"Common strings representing missing values — common_na_strings","text":"vector contains common values NA (missing) intended use within {cleanepi} functions replace_missing_values(). current list strings used can found printing common_na_strings. serves helpful tool explore data possible missing values. However, strongly caution using replace NA values without meticulously examining incidence case. Please note common_na_strings utilizes \\\\ around \"?\", \".\", \"*\" characters prevent wildcard","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/common_na_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common strings representing missing values — common_na_strings","text":"","code":"common_na_strings"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/common_na_strings.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common strings representing missing values — common_na_strings","text":"vector 35 character strings.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/common_na_strings.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Common strings representing missing values — common_na_strings","text":"vector combination naniar::common_na_strings (https://github.com/njtierney/naniar/) strings found literature.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/construct_misspelled_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the report for the detected misspelled values during dictionary-based data cleaning operation — construct_misspelled_report","title":"Build the report for the detected misspelled values during dictionary-based data cleaning operation — construct_misspelled_report","text":"Build report detected misspelled values dictionary-based data cleaning operation","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/construct_misspelled_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the report for the detected misspelled values during dictionary-based data cleaning operation — construct_misspelled_report","text":"","code":"construct_misspelled_report(misspelled_options, data)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/construct_misspelled_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the report for the detected misspelled values during dictionary-based data cleaning operation — construct_misspelled_report","text":"misspelled_options list detected misspelled values columns interest. data data frame","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/construct_misspelled_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the report for the detected misspelled values during dictionary-based data cleaning operation — construct_misspelled_report","text":"data frame details input data misspelled values found.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric to date — convert_numeric_to_date","title":"Convert numeric to date — convert_numeric_to_date","text":"Convert numeric date","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric to date — convert_numeric_to_date","text":"","code":"convert_numeric_to_date(data, target_columns, ref_date, forward = TRUE)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric to date — convert_numeric_to_date","text":"data input data frame linelist target_columns vector columns names converted numeric date. input data linelist object, parameter can set linelist_tags wish convert tagged columns. ref_date reference date. can also character string name reference column. forward Boolean indicate whether counts started reference date (TRUE) (FALSE). default TRUE.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert numeric to date — convert_numeric_to_date","text":"data frame column interest updated","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert numeric to date — convert_numeric_to_date","text":"","code":"data <- readRDS(system.file(\"extdata\", \"test_df1.RDS\", package = \"cleanepi\")) data <- convert_numeric_to_date(   data           = data,   target_columns = \"recruted_on_day\",   ref_date       = as.Date(\"2022-10-13\"),   forward        = TRUE )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert columns into numeric — convert_to_numeric","title":"Convert columns into numeric — convert_to_numeric","text":"function invoked without specifying column names converted, target columns ones returned scan_data() function. Furthermore, identifies columns proportion numeric values least twice percentage character values performs conversion .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert columns into numeric — convert_to_numeric","text":"","code":"convert_to_numeric(data, target_columns = NULL, lang = c(\"en\", \"fr\", \"es\"))"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert columns into numeric — convert_to_numeric","text":"data input data frame linelist target_columns vector target column names. input data linelist object, parameter can set linelist_tags tagged columns converted numeric. lang text's language. Currently one \"en\" | \"fr\" | \"es\".","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert columns into numeric — convert_to_numeric","text":"data frame conversion process, wherein specified detected columns transformed numeric format.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert columns into numeric — convert_to_numeric","text":"","code":"dat <- convert_to_numeric(   data           = readRDS(system.file(\"extdata\", \"messy_data.RDS\",                                        package = \"cleanepi\")),   target_columns = \"age\",   lang           = \"en\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/correct_subject_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct the wrong subject IDs based on the user-provided values. — correct_subject_ids","title":"Correct the wrong subject IDs based on the user-provided values. — correct_subject_ids","text":"detecting incorrect subject IDs check_subject_ids() function, use function provide correct IDs perform substitution.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/correct_subject_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct the wrong subject IDs based on the user-provided values. — correct_subject_ids","text":"","code":"correct_subject_ids(data, target_columns, correction_table)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/correct_subject_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct the wrong subject IDs based on the user-provided values. — correct_subject_ids","text":"data input data frame linelist target_columns vector column names subject ids. correction_table data frame following two columns: : column wrong subject IDs, : column values used substitute incorrect ids.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/correct_subject_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct the wrong subject IDs based on the user-provided values. — correct_subject_ids","text":"input dataset subject ids comply expected format.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/correct_subject_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct the wrong subject IDs based on the user-provided values. — correct_subject_ids","text":"","code":"# detect the incorrect subject ids dat <- check_subject_ids(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = \"study_id\",   prefix         = \"PS\",   suffix         = \"P2\",   range          = c(1, 100),   nchar          = 7 ) #> Warning: Detected incorrect subject ids at lines: 3, 5, 7 #> Use the correct_subject_ids() function to adjust them.  # generate the correction table correction_table <- data.frame(   from = c(\"P0005P2\", \"PB500P2\", \"PS004P2-1\"),   to   = c(\"PB005P2\", \"PB050P2\", \"PS004P2\") )  # perform the correction dat <- correct_subject_ids(   data             = dat,   target_columns   = \"study_id\",   correction_table = correction_table )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_column_existence.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if date column exists in the given dataset — date_check_column_existence","title":"Check if date column exists in the given dataset — date_check_column_existence","text":"Check date column exists given dataset","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_column_existence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if date column exists in the given dataset — date_check_column_existence","text":"","code":"date_check_column_existence(data, date_column_names)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_column_existence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if date column exists in the given dataset — date_check_column_existence","text":"data input data frame date_column_names vector name columns check","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_column_existence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if date column exists in the given dataset — date_check_column_existence","text":"input vector column names part input data, error issued otherwise.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_outsiders.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert and update the date values — date_check_outsiders","title":"Convert and update the date values — date_check_outsiders","text":"Convert update date values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_outsiders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert and update the date values — date_check_outsiders","text":"","code":"date_check_outsiders(data, timeframe, new_dates, cols)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_outsiders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert and update the date values — date_check_outsiders","text":"data data frame linelist timeframe vector 2 values type date. provided, date values fall within timeframe set NA. new_dates vector converted date values cols names date column converted","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_outsiders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert and update the date values — date_check_outsiders","text":"list 2 data frames: updated input data (columns converted Date) data frame date values within specified timeframe.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_timeframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Check date time frame — date_check_timeframe","title":"Check date time frame — date_check_timeframe","text":"Check date time frame","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_timeframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check date time frame — date_check_timeframe","text":"","code":"date_check_timeframe(first_date, last_date)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_timeframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check date time frame — date_check_timeframe","text":"first_date Date object specifying first valid date. arbitrary default value fifty years last_date. last_date Date object specifying last valid date. defaults value current date.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_check_timeframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check date time frame — date_check_timeframe","text":"list first last dates","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_choose_first_good.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","title":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","text":"Choose first non-missing date data frame dates","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_choose_first_good.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","text":"","code":"date_choose_first_good(date_a_frame, column_name)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_choose_first_good.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","text":"date_a_frame data frame column contains different parsing date vector column_name target column name","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_choose_first_good.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose the first non-missing date from a data frame of dates — date_choose_first_good","text":"chosen first date value. possible values given date, registered report object.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert characters to dates — date_convert","title":"Convert characters to dates — date_convert","text":"Convert characters dates","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert characters to dates — date_convert","text":"","code":"date_convert(data, cols, error_tolerance, timeframe = NULL, orders)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert characters to dates — date_convert","text":"data data frame linelist cols date column name(s) error_tolerance number 0 1 indicating proportion entries identified dates tolerated; proportion exceeded, original vector returned, message issued; defaults 0.4 (40 percent). timeframe vector 2 values type date. provided, date values fall within timeframe set NA. orders list character vector date codes fine-grained parsing dates. allows parsing mixed dates. list supplied, list used successive tries parsing. provided (orders = NULL), function use following order defined guesser:","code":"list(   quarter_partial_dates = c(\"Y\", \"Ym\", \"Yq\"),   world_digit_months = c(\"Yq\", \"ymd\", \"ydm\", \"dmy\", \"mdy\", \"myd\", \"dym\",                          \"Ymd\", \"Ydm\", \"dmY\", \"mdY\", \"mYd\", \"dYm\"),   world_named_months = c(\"dby\", \"dyb\", \"bdy\", \"byd\", \"ybd\", \"ydb\",                          \"dbY\", \"dYb\", \"bdY\", \"bYd\", \"Ybd\", \"Ydb\"),   us_format = c(\"Omdy\", \"YOmd\") )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert characters to dates — date_convert","text":"data frame specified columns converted Date.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_complex_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect complex date format — date_detect_complex_format","title":"Detect complex date format — date_detect_complex_format","text":"Detect complex date format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_complex_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect complex date format — date_detect_complex_format","text":"","code":"date_detect_complex_format(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_complex_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect complex date format — date_detect_complex_format","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_complex_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect complex date format — date_detect_complex_format","text":"string inferred format.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_day_or_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the appropriate abbreviation for day or month value — date_detect_day_or_month","title":"Detect the appropriate abbreviation for day or month value — date_detect_day_or_month","text":"Detect appropriate abbreviation day month value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_day_or_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the appropriate abbreviation for day or month value — date_detect_day_or_month","text":"","code":"date_detect_day_or_month(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_day_or_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the appropriate abbreviation for day or month value — date_detect_day_or_month","text":"x input string","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_day_or_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the appropriate abbreviation for day or month value — date_detect_day_or_month","text":"string abbreviation used distinguish written day month","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect a date format with only 1 separator — date_detect_format","title":"Detect a date format with only 1 separator — date_detect_format","text":"Detect date format 1 separator","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect a date format with only 1 separator — date_detect_format","text":"","code":"date_detect_format(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect a date format with only 1 separator — date_detect_format","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect a date format with only 1 separator — date_detect_format","text":"string identified format.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the special character that is the separator in the date values — date_detect_separator","title":"Detect the special character that is the separator in the date values — date_detect_separator","text":"Detect special character separator date values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the special character that is the separator in the date values — date_detect_separator","text":"","code":"date_detect_separator(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the special character that is the separator in the date values — date_detect_separator","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_separator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the special character that is the separator in the date values — date_detect_separator","text":"detected separator vector identified special characters.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_simple_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Get format from a simple Date value — date_detect_simple_format","title":"Get format from a simple Date value — date_detect_simple_format","text":"Get format simple Date value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_simple_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get format from a simple Date value — date_detect_simple_format","text":"","code":"date_detect_simple_format(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_simple_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get format from a simple Date value — date_detect_simple_format","text":"x string date value interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_detect_simple_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get format from a simple Date value — date_detect_simple_format","text":"string abbreviation correspond Date value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer date format from a vector or characters — date_get_format","title":"Infer date format from a vector or characters — date_get_format","text":"Infer date format vector characters","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer date format from a vector or characters — date_get_format","text":"","code":"date_get_format(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer date format from a vector or characters — date_get_format","text":"x input character vector","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer date format from a vector or characters — date_get_format","text":"string inferred date format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part1.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a string based on a pattern and return the first element of the resulting vector. — date_get_part1","title":"Split a string based on a pattern and return the first element of the resulting vector. — date_get_part1","text":"Split string based pattern return first element resulting vector.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a string based on a pattern and return the first element of the resulting vector. — date_get_part1","text":"","code":"date_get_part1(x, sep)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a string based on a pattern and return the first element of the resulting vector. — date_get_part1","text":"x string interest sep separator string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a string based on a pattern and return the first element of the resulting vector. — date_get_part1","text":"string first element vector returned strsplit() function.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get part2 of date value — date_get_part2","title":"Get part2 of date value — date_get_part2","text":"Get part2 date value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get part2 of date value — date_get_part2","text":"","code":"date_get_part2(x, sep)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get part2 of date value — date_get_part2","text":"x string interest sep separator string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get part2 of date value — date_get_part2","text":"string second element vector returned strsplit() function.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part3.html","id":null,"dir":"Reference","previous_headings":"","what":"Get part3 of date value — date_get_part3","title":"Get part3 of date value — date_get_part3","text":"Get part3 date value","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get part3 of date value — date_get_part3","text":"","code":"date_get_part3(x, sep)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get part3 of date value — date_get_part3","text":"x string interest sep separator string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_get_part3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get part3 of date value — date_get_part3","text":"string third element vector returned strsplit() function.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":null,"dir":"Reference","previous_headings":"","what":"Try and guess dates from a characters — date_guess","title":"Try and guess dates from a characters — date_guess","text":"Note FEATURE STILL EXPERIMENTAL: strongly recommend checking converted dates manually. function tries extract dates character vector factor. treats entry independently, using regular expressions detect date present, format, successful converts entry standard Date Ymd format (e.g. 2018-01-21). Entries processed result NA. error threshold can used define maximum number resulting NA (.e. entries without identified date) can tolerated. threshold exceeded, original vector returned.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try and guess dates from a characters — date_guess","text":"","code":"date_guess(x, column_name, quiet = TRUE, orders = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try and guess dates from a characters — date_guess","text":"x character vector factor column_name target column name quiet logical indicating messages displayed console (TRUE, default); set FALSE silence messages orders list character vector date codes fine-grained parsing dates. allows parsing mixed dates. list supplied, list used successive tries parsing. provided (orders = NULL), function use following order defined guesser:","code":"list(   quarter_partial_dates = c(\"Y\", \"Ym\", \"Yq\"),   world_digit_months = c(\"Yq\", \"ymd\", \"ydm\", \"dmy\", \"mdy\", \"myd\", \"dym\",                          \"Ymd\", \"Ydm\", \"dmY\", \"mdY\", \"mYd\", \"dYm\"),   world_named_months = c(\"dby\", \"dyb\", \"bdy\", \"byd\", \"ybd\", \"ydb\",                          \"dbY\", \"dYb\", \"bdY\", \"bYd\", \"Ybd\", \"Ydb\"),   us_format = c(\"Omdy\", \"YOmd\") )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try and guess dates from a characters — date_guess","text":"list following two elements: vector newly reformatted dates data frame date values converted one format. values comply one format, later element NULL.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","title":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","text":"Guess character vector contains Date values, convert date","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","text":"","code":"date_guess_convert(data, error_tolerance, timeframe, orders)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","text":"data data frame error_tolerance number 0 1 indicating proportion entries identified dates tolerated; proportion exceeded, original vector returned, message issued; defaults 0.4 (40 percent). timeframe vector 2 values type date. provided, date values fall within timeframe set NA. orders list character vector date codes fine-grained parsing dates. allows parsing mixed dates. list supplied, list used successive tries parsing. provided (orders = NULL), function use following order defined guesser:","code":"list(   quarter_partial_dates = c(\"Y\", \"Ym\", \"Yq\"),   world_digit_months = c(\"Yq\", \"ymd\", \"ydm\", \"dmy\", \"mdy\", \"myd\", \"dym\",                          \"Ymd\", \"Ydm\", \"dmY\", \"mdY\", \"mYd\", \"dYm\"),   world_named_months = c(\"dby\", \"dyb\", \"bdy\", \"byd\", \"ybd\", \"ydb\",                          \"dbY\", \"dYb\", \"bdY\", \"bYd\", \"Ybd\", \"Ydb\"),   us_format = c(\"Omdy\", \"YOmd\") )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_guess_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess if a character vector contains Date values, and convert them to date — date_guess_convert","text":"input data frame character columns date values converted Date.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_guess_and_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract date from a character vector — date_i_guess_and_convert","title":"Extract date from a character vector — date_i_guess_and_convert","text":"function tries converting single character string well-formatted date, still returning character. convert , returns NA.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_guess_and_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract date from a character vector — date_i_guess_and_convert","text":"","code":"date_i_guess_and_convert(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_guess_and_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract date from a character vector — date_i_guess_and_convert","text":"x character vector","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_i_guess_and_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract date from a character vector — date_i_guess_and_convert","text":"format resolved, function returns NA; matching format found, returns converted values.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_make_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the auto-detected format — date_make_format","title":"Build the auto-detected format — date_make_format","text":"Put together different date format characters identified target date column.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_make_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the auto-detected format — date_make_format","text":"","code":"date_make_format(f1, f2, f3)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_make_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the auto-detected format — date_make_format","text":"f1 first part inferred format f2 second part inferred format f3 third part inferred format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_make_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the auto-detected format — date_make_format","text":"character string represent inferred format date values. returns NULL format resolved.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_match_format_and_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the number of provided formats matches the number of target columns to be standardized. — date_match_format_and_column","title":"Check whether the number of provided formats matches the number of target columns to be standardized. — date_match_format_and_column","text":"Check whether number provided formats matches number target columns standardized.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_match_format_and_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the number of provided formats matches the number of target columns to be standardized. — date_match_format_and_column","text":"","code":"date_match_format_and_column(target_columns, format)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_match_format_and_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the number of provided formats matches the number of target columns to be standardized. — date_match_format_and_column","text":"target_columns vector column names standardized format vector formats used standardizing columns","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_match_format_and_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the number of provided formats matches the number of target columns to be standardized. — date_match_format_and_column","text":"vector format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process date variable — date_process","title":"Process date variable — date_process","text":"Process date variable","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process date variable — date_process","text":"","code":"date_process(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process date variable — date_process","text":"x object class Date","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process date variable — date_process","text":"converted input value Date character","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_rescue_lubridate_failures.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","title":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","text":"Find dates lubridate ","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_rescue_lubridate_failures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","text":"","code":"date_rescue_lubridate_failures(date_a_frame, original_dates)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_rescue_lubridate_failures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","text":"date_a_frame data frame column contains different parsing date vector original_dates vector original dates.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_rescue_lubridate_failures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the dates that lubridate couldn't — date_rescue_lubridate_failures","text":"input data frame values match proposed formats converted Date.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_trim_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim dates outside of the defined boundaries — date_trim_outliers","title":"Trim dates outside of the defined boundaries — date_trim_outliers","text":"Trim dates outside defined boundaries","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_trim_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim dates outside of the defined boundaries — date_trim_outliers","text":"","code":"date_trim_outliers(new_dates, dmin, dmax, cols, original_dates)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_trim_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim dates outside of the defined boundaries — date_trim_outliers","text":"new_dates vector new date values dmin minimum date dmax maximum date cols name date column interest original_dates vector original date values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/date_trim_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim dates outside of the defined boundaries — date_trim_outliers","text":"list 2 elements: update input vector date values boundaries replaced NA, vector boundaries values.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_misspelled_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","title":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","text":"Detect misspelled options columns cleaned","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_misspelled_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","text":"","code":"detect_misspelled_options(data, dictionary)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_misspelled_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","text":"data data frame dictionary data dictionary associated input data.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_misspelled_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect misspelled options in columns to be cleaned — detect_misspelled_options","text":"list indexes misspelled values every column needs cleaned.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_to_numeric_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the numeric columns that appears as characters due to the presence of some character values in the column. — detect_to_numeric_columns","title":"Detect the numeric columns that appears as characters due to the presence of some character values in the column. — detect_to_numeric_columns","text":"Detect numeric columns appears characters due presence character values column.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_to_numeric_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the numeric columns that appears as characters due to the presence of some character values in the column. — detect_to_numeric_columns","text":"","code":"detect_to_numeric_columns(scan_res)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_to_numeric_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the numeric columns that appears as characters due to the presence of some character values in the column. — detect_to_numeric_columns","text":"scan_res data frame corresponds result scan_data() function","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/detect_to_numeric_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the numeric columns that appears as characters due to the presence of some character values in the column. — detect_to_numeric_columns","text":"vector column names converted numeric","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/dictionary_make_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Make data dictionary for 1 field — dictionary_make_metadata","title":"Make data dictionary for 1 field — dictionary_make_metadata","text":"Make data dictionary 1 field","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/dictionary_make_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make data dictionary for 1 field — dictionary_make_metadata","text":"","code":"dictionary_make_metadata(x, field_column)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/dictionary_make_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make data dictionary for 1 field — dictionary_make_metadata","text":"x vector choices input data field_column character name field choices made.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/dictionary_make_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make data dictionary for 1 field — dictionary_make_metadata","text":"data frame dictionary format accepted {matchmaker} package.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"Identify return duplicated rows data frame linelist.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"","code":"find_duplicates(data, target_columns = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"data data frame linelist. target_columns vector columns names indices consider looking duplicates. input data linelist object, parameter can set tagsfrom duplicates removed. default value NULL, considers duplicates across columns.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"data frame linelist duplicated rows following 2 additional columns: row_id: indices duplicated rows input data. Users can choose indices, row consider redundant group duplicates. group_id: unique identifier associated group duplicates.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"","code":"dups <- find_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = c(\"dt_onset\", \"dt_report\", \"sex\", \"outcome\") ) #> Found 57 duplicated rows in the dataset. Please consult the report for more details."},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_default_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and return clean_data() default parameters — get_default_params","title":"Set and return clean_data() default parameters — get_default_params","text":"calling clean_data() function params = NULL, arguments defined applied input data. default, operations require target columns specified user performed. default cleaning operations include: ) standardizing column names, ii) detecting removing duplicates, iii) removing constant data.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_default_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and return clean_data() default parameters — get_default_params","text":"","code":"get_default_params()"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_default_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and return clean_data() default parameters — get_default_params","text":"list default cleaning parameters.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sum of numbers from a string — get_sum","title":"Get sum of numbers from a string — get_sum","text":"Get sum numbers string","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sum of numbers from a string — get_sum","text":"","code":"get_sum(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sum of numbers from a string — get_sum","text":"x string interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sum of numbers from a string — get_sum","text":"numeric correspond sum every digit provided string.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_target_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of the columns from which duplicates will be found — get_target_column_names","title":"Get the names of the columns from which duplicates will be found — get_target_column_names","text":"Get names columns duplicates found","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_target_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of the columns from which duplicates will be found — get_target_column_names","text":"","code":"get_target_column_names(data, target_columns, cols)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_target_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of the columns from which duplicates will be found — get_target_column_names","text":"data data frame linelist target_columns vector column names. linelist data, can 'linelist_tags' cols vector empty constant columns","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/get_target_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of the columns from which duplicates will be found — get_target_column_names","text":"vector target column names indexes","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/is_date_sequence_ordered.html","id":null,"dir":"Reference","previous_headings":"","what":"Check order of a sequence of date-events — is_date_sequence_ordered","title":"Check order of a sequence of date-events — is_date_sequence_ordered","text":"Check order sequence date-events","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/is_date_sequence_ordered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check order of a sequence of date-events — is_date_sequence_ordered","text":"","code":"is_date_sequence_ordered(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/is_date_sequence_ordered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check order of a sequence of date-events — is_date_sequence_ordered","text":"x vector Date values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/is_date_sequence_ordered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check order of a sequence of date-events — is_date_sequence_ordered","text":"TRUE elements vector ordered, FALSE otherwise.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_readcap_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Redcap data dictionary into {matchmaker} dictionary format — make_readcap_dictionary","title":"Convert Redcap data dictionary into {matchmaker} dictionary format — make_readcap_dictionary","text":"Convert Redcap data dictionary {matchmaker} dictionary format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_readcap_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Redcap data dictionary into {matchmaker} dictionary format — make_readcap_dictionary","text":"","code":"make_readcap_dictionary(metadata, field_column, opt_column, field_type)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_readcap_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Redcap data dictionary into {matchmaker} dictionary format — make_readcap_dictionary","text":"metadata data frame data dictionary associated Redcap project field_column name column, input dictionary, contains field names Redcap project data opt_column name column, input dictionary, contains definition choices every column Redcap project data field_type character name column contains field type information","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/make_readcap_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Redcap data dictionary into {matchmaker} dictionary format — make_readcap_dictionary","text":"data frame 4 columns. format required {matchmaker} R package dictionary-based cleaning.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/modify_default_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Update clean_data() default argument's values with the user-provided values — modify_default_params","title":"Update clean_data() default argument's values with the user-provided values — modify_default_params","text":"Update clean_data() default argument's values user-provided values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/modify_default_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update clean_data() default argument's values with the user-provided values — modify_default_params","text":"","code":"modify_default_params(defaults, params, strict = TRUE)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/modify_default_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update clean_data() default argument's values with the user-provided values — modify_default_params","text":"defaults list default arguments params list user-specified arguments strict boolean specified whether trigger error difference list default arguments list arguments provided user.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/modify_default_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update clean_data() default argument's values with the user-provided values — modify_default_params","text":"updated list parameters used perform data cleaning.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/numbers_only.html","id":null,"dir":"Reference","previous_headings":"","what":"Detects whether a string contains only numbers or not. — numbers_only","title":"Detects whether a string contains only numbers or not. — numbers_only","text":"Detects whether string contains numbers .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/numbers_only.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detects whether a string contains only numbers or not. — numbers_only","text":"","code":"numbers_only(x)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/numbers_only.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detects whether a string contains only numbers or not. — numbers_only","text":"x string numbers","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/numbers_only.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detects whether a string contains only numbers or not. — numbers_only","text":"TRUE string contains numbers, FALSE otherwise","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/perform_remove_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform constant data removal. — perform_remove_constants","title":"Perform constant data removal. — perform_remove_constants","text":"function called every iteration constant data removal constant data found.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/perform_remove_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform constant data removal. — perform_remove_constants","text":"","code":"perform_remove_constants(data, cutoff)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/perform_remove_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform constant data removal. — perform_remove_constants","text":"data input data frame linelist cutoff cut-empty rows columns removal. provided, rows columns percent missing data greater cut-removed.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/perform_remove_constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform constant data removal. — perform_remove_constants","text":"list input dataset empty rows columns well constant columns removed.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_misspelled_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the detected misspelled values — print_misspelled_values","title":"Print the detected misspelled values — print_misspelled_values","text":"Print detected misspelled values","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_misspelled_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the detected misspelled values — print_misspelled_values","text":"","code":"print_misspelled_values(misspelled_options)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_misspelled_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the detected misspelled values — print_misspelled_values","text":"misspelled_options list misspelled values found different columns input data.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_misspelled_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the detected misspelled values — print_misspelled_values","text":"Prints misspelled values column interest","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate report from data cleaning operations — print_report","title":"Generate report from data cleaning operations — print_report","text":"Generate report data cleaning operations","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate report from data cleaning operations — print_report","text":"","code":"print_report(   data,   report_title = \"{cleanepi} data cleaning report\",   output_file_name = NULL,   format = \"html\",   print = TRUE )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate report from data cleaning operations — print_report","text":"data data.frame linelist object returned clean_data() main functions data cleaning module. report_title title appear report output_file_name string specifying name report file, excluding file extension. file name supplied, one automatically generated format cleanepi_report_YYMMDD_HHMMSS. format file format report. Currently \"html\" supported. print logical specifies whether print generated HTML file .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate report from data cleaning operations — print_report","text":"string containing name path saved report","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/print_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate report from data cleaning operations — print_report","text":"","code":"# \\donttest{ data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")) test_dictionary <- readRDS(system.file(\"extdata\", \"test_dictionary.RDS\",                                        package = \"cleanepi\"))  # scan through the data scan_res <- scan_data(data)  # Perform data cleaning cleaned_data <- data %>%  standardize_column_names(keep = NULL, rename = c(\"DOB\" = \"dateOfBirth\")) %>%  replace_missing_values(target_columns = NULL, na_strings = \"-99\") %>%  remove_constants(cutoff = 1.0) %>%  remove_duplicates(target_columns = NULL) %>%  standardize_dates(target_columns  = NULL,                    error_tolerance = 0.4,                    format          = NULL,                    timeframe   = as.Date(c(\"1973-05-29\", \"2023-05-29\"))) %>%  check_subject_ids(target_columns = \"study_id\",                    prefix         = \"PS\",                    suffix         = \"P2\",                    range          = c(1L, 100L),                    nchar          = 7L) %>%  convert_to_numeric(target_columns = \"sex\", lang = \"en\") %>%  clean_using_dictionary(dictionary = test_dictionary) #> No duplicates were found. #> Warning: Detected incorrect subject ids at lines: 3, 5, 7 #> Use the correct_subject_ids() function to adjust them.  # add the data scanning result to the report cleaned_data <- add_to_report(x     = cleaned_data,                               key   = \"scanning_result\",                               value = scan_res)  # save a report in the current directory using the previously-created objects print_report(   data             = cleaned_data,   report_title     = \"{cleanepi} data cleaning report\",   output_file_name = NULL,   format           = \"html\",   print            = TRUE ) #> Generating html report in /tmp/Rtmpaa8kX3 #> [1] \"/tmp/Rtmpaa8kX3/cleanepi_report__2024-10-21Mont_125453.html\" # }"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove constant data i.e. empty rows and columns and constant columns — remove_constants","title":"Remove constant data i.e. empty rows and columns and constant columns — remove_constants","text":"function iteratively removes constant data found anymore. stores details removed constant data form data frame within report object.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove constant data i.e. empty rows and columns and constant columns — remove_constants","text":"","code":"remove_constants(data, cutoff = 1L)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove constant data i.e. empty rows and columns and constant columns — remove_constants","text":"data input data frame linelist cutoff cut-empty rows columns removal. provided, rows columns percent missing data greater cut-removed.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove constant data i.e. empty rows and columns and constant columns — remove_constants","text":"input dataset without empty rows columns constant columns.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_constants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove constant data i.e. empty rows and columns and constant columns — remove_constants","text":"","code":"data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\"))  # introduce an empty column data$empty_column <- NA  # remove the constant columns, empty rows and columns dat <- remove_constants(   data   = data,   cutoff = 1 )  # check the report to see what has happened report <- attr(dat, \"report\") report$constant_data #>   iteration empty_columns empty_rows                       constant_columns #> 1         1  empty_column         NA event_name, country_code, country_name"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicates — remove_duplicates","title":"Remove duplicates — remove_duplicates","text":"removing duplicates, users can specify set columns consider 'target_columns' argument.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicates — remove_duplicates","text":"","code":"remove_duplicates(data, target_columns = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicates — remove_duplicates","text":"data input data frame linelist. target_columns vector column names use looking duplicates. input data linelist object, parameter can set linelist_tags wish look duplicates tagged columns . Default NULL.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicates — remove_duplicates","text":" data frame linelist  without duplicates values constant columns.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicates — remove_duplicates","text":"","code":"no_dups <- remove_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = \"linelist_tags\" ) #> Found 57 duplicated rows in the dataset. Please consult the report for more details."},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace missing values with NA — replace_missing_values","title":"Replace missing values with NA — replace_missing_values","text":"Replace missing values NA","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace missing values with NA — replace_missing_values","text":"","code":"replace_missing_values(   data,   target_columns = NULL,   na_strings = cleanepi::common_na_strings )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace missing values with NA — replace_missing_values","text":"data data frame linelist target_columns vector column names. provided, substitution missing values executed specified columns. input data linelist object, parameter can set linelist_tags wish replace missing values NA tagged columns . na_strings vector strings represents missing values columns interest. default, utilizes cleanepi::common_na_strings. However, missing values string columns interest included predefined vector, can used value argument.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace missing values with NA — replace_missing_values","text":"input data missing values replaced NA.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_missing_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace missing values with NA — replace_missing_values","text":"","code":"cleaned_data <- replace_missing_values(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   target_columns = \"sex\",   na_strings     = \"-99\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_with_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect and replace values with NA from a vector — replace_with_na","title":"Detect and replace values with NA from a vector — replace_with_na","text":"Detect replace values NA vector","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_with_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect and replace values with NA from a vector — replace_with_na","text":"","code":"replace_with_na(x, na_strings)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_with_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect and replace values with NA from a vector — replace_with_na","text":"x input vector na_strings vector values replaced","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/replace_with_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect and replace values with NA from a vector — replace_with_na","text":"vector specified values replaced NA found.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/retrieve_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column names — retrieve_column_names","title":"Get column names — retrieve_column_names","text":"several performing data cleaning operations using clean_data() function, input column names might altered column names cleaning. consequence , cleaning operations fail due column names mismatch. function provided anticipate scenario, hence providing continuity cleaning operations.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/retrieve_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column names — retrieve_column_names","text":"","code":"retrieve_column_names(data, target_columns)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/retrieve_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column names — retrieve_column_names","text":"data input data. can also modified data generated intermediate cleaning operations. target_columns vector target column names","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/retrieve_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get column names — retrieve_column_names","text":"vector column names used target cleaning operations","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan through a data frame and return the proportion of missing, numeric, Date, character, logical values. — scan_data","title":"Scan through a data frame and return the proportion of missing, numeric, Date, character, logical values. — scan_data","text":"function checks existence character columns data. found, reports back proportion data types mentioned columns. See details section know works.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan through a data frame and return the proportion of missing, numeric, Date, character, logical values. — scan_data","text":"","code":"scan_data(data)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan through a data frame and return the proportion of missing, numeric, Date, character, logical values. — scan_data","text":"data data frame linelist","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scan through a data frame and return the proportion of missing, numeric, Date, character, logical values. — scan_data","text":"data frame input data contains columns type character. invisibly returns NA otherwise. returned data frame number rows number character columns, six columns representing column names, proportion missing, numeric, date, character, logical values.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scan through a data frame and return the proportion of missing, numeric, Date, character, logical values. — scan_data","text":"work? character columns identified first. character column function returns message. every character column, count: number missing data NA number numeric values. process detecting valid dates among numeric values initiated using lubridate::as_date() date_guess() functions. found, warning triggered alert presence ambiguous (numeric values potentially date) values. NOTE: date considered valid case falls within interval today's date 50 years back today. detect Date values non-numeric using date_guess() function. date count sum dates identified numeric non-numeric values. overlap numeric date, sum across rows scanning result might greater 1. count logical values. remaining values type characters.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scan through a data frame and return the proportion of missing, numeric, Date, character, logical values. — scan_data","text":"","code":"# scan through a data frame of characters scan_result <- scan_data(   data = readRDS(system.file(\"extdata\", \"messy_data.RDS\",                              package = \"cleanepi\")) ) #> ! Found 50 numeric values that can also be of type Date in column `case_id`.  # scan through a data frame with two character columns scan_result <- scan_data(   data = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                              package = \"cleanepi\")) )  # scan through a data frame with no character columns data(iris) iris[[\"fct\"]] <- as.factor(sample(c(\"gray\", \"orange\"), nrow(iris),                            replace = TRUE)) iris[[\"lgl\"]]  <- sample(c(TRUE, FALSE), nrow(iris), replace = TRUE) iris[[\"date\"]] <- as.Date(seq.Date(from = as.Date(\"2024-01-01\"),                                    to = as.Date(\"2024-08-30\"),                                    length.out = nrow(iris))) iris[[\"posit_ct\"]] <- as.POSIXct(iris[[\"date\"]]) scan_result        <- scan_data(data = iris) #> ℹ No character column found from the input data."},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_in_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan through a character column — scan_in_character","title":"Scan through a character column — scan_in_character","text":"Scan character column","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_in_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan through a character column — scan_in_character","text":"","code":"scan_in_character(x, x_name)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_in_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan through a character column — scan_in_character","text":"x input character vector x_name name corresponding column","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_in_character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scan through a character column — scan_in_character","text":"numeric vector proportion different types data detected within input vector.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize column names of a data frame or linelist — standardize_column_names","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"columns names reformatted use snake case. conversion snake case work expected, use keep /rename arguments reformat column name properly.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"","code":"standardize_column_names(data, keep = NULL, rename = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"data input data frame linelist. keep vector column names maintain . dealing linelist, can set linelist_tags, maintain tagged column names. Default NULL. rename named vector column names renamed. form c(new_name1 = \"old_name1\", new_name2 = \"old_name2\") example.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"data frame linelist easy work column names.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_column_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize column names of a data frame or linelist — standardize_column_names","text":"","code":"# do not rename 'date.of.admission' cleaned_data <- standardize_column_names(   data = readRDS(system.file(\"extdata\", \"test_df.RDS\",                              package = \"cleanepi\")),   keep = \"date.of.admission\" )  # do not rename 'date.of.admission', but rename 'dateOfBirth' and 'sex' to # 'DOB' and 'gender' respectively cleaned_data <- standardize_column_names(   data   = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                package = \"cleanepi\")),   keep   = \"date.of.admission\",   rename = c(DOB = \"dateOfBirth\", gender = \"sex\") )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize date variables — standardize_dates","title":"Standardize date variables — standardize_dates","text":"format values column /target columns defined, strongly recommend checking converted dates manually make sure dates extracted character vector factor correct.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize date variables — standardize_dates","text":"","code":"standardize_dates(   data,   target_columns = NULL,   format = NULL,   timeframe = NULL,   error_tolerance = 0.5,   orders = NULL )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize date variables — standardize_dates","text":"data data frame linelist target_columns vector target date column names. input data linelist object, parameter can set linelist_tags wish standardize date columns across tagged columns . Default NULL. format vector expected formats date values date columns. Default NULL. timeframe vector 2 values type date. provided, date values fall within timeframe set NA. error_tolerance number 0 1 indicating proportion entries identified dates tolerated; proportion exceeded, original vector returned, message issued; defaults 0.4 (40 percent). orders list character vector date codes fine-grained parsing dates. allows parsing mixed dates. list supplied, list used successive tries parsing. provided (orders = NULL), function use following order defined guesser:","code":"list(   quarter_partial_dates = c(\"Y\", \"Ym\", \"Yq\"),   world_digit_months = c(\"Yq\", \"ymd\", \"ydm\", \"dmy\", \"mdy\", \"myd\", \"dym\",                          \"Ymd\", \"Ydm\", \"dmY\", \"mdY\", \"mYd\", \"dYm\"),   world_named_months = c(\"dby\", \"dyb\", \"bdy\", \"byd\", \"ybd\", \"ydb\",                          \"dbY\", \"dYb\", \"bdY\", \"bYd\", \"Ybd\", \"Ydb\"),   us_format = c(\"Omdy\", \"YOmd\") )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize date variables — standardize_dates","text":"input dataset date columns standardized. date values specified timeframe reported report. Similarly, date values comply multiple formats also featured report object.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize date variables — standardize_dates","text":"Check presence date values multiple formats $multi_format_dates element report. Converting ambiguous character strings dates difficult many reasons: dates may use standard Ymd format within variable, dates may follow different formats dates may mixed things dates behavior .Date presence non-date hard predict, sometimes returning NA, sometimes issuing error. function tries address issues. Dates following format automatically detected, irrespective separators (e.g. \"-\", \" \", \"/\") surrounding text: \"19 09 2018\" \"2018 09 19\" \"19 Sep 2018\" \"2018 Sep 19\" \"Sep 19 2018\"","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"how-it-works","dir":"Reference","previous_headings":"","what":"How it works","title":"Standardize date variables — standardize_dates","text":"function relies heavily lubridate::parse_date_time(), extremely flexible date parser works well consistent date formats, can quickly become unwieldy may produce spurious results. standardize_dates() use list formats orders argument run parse_date_time() format vector separately take first correctly parsed date trials. default orders shown , dates 03 Jan 2018, 07/03/1982, 08/20/85 correctly interpreted 2018-01-03, 1982-03-07, 1985-08-20. examples section show can manipulate orders customized situation.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize date variables — standardize_dates","text":"","code":"x <- c(\"03 Jan 2018\", \"07/03/1982\", \"08/20/85\") # The below will coerce values where the month is written in letters only # into Date. as.Date(lubridate::parse_date_time(x, orders = c(\"Ybd\", \"dby\"))) #> Warning:  2 failed to parse. #> [1] \"2018-01-03\" NA           NA            # coerce values where the month is written in letters or numbers into Date. as.Date(lubridate::parse_date_time(x, orders = c(\"dmy\", \"Ymd\"))) #> Warning:  1 failed to parse. #> [1] \"2018-01-03\" \"1982-03-07\" NA            # How to use standardize_dates() dat <- standardize_dates(   data            = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                         package = \"cleanepi\")),   target_columns  = \"date_first_pcr_positive_test\",   format          = NULL,   timeframe       = NULL,   error_tolerance = 0.4,   orders          = list(world_named_months = c(\"Ybd\", \"dby\"),                          world_digit_months = c(\"dmy\", \"Ymd\"),                          US_formats         = c(\"Omdy\", \"YOmd\")) )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate time span between dates — timespan","title":"Calculate time span between dates — timespan","text":"Calculate time span dates","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate time span between dates — timespan","text":"","code":"timespan(   data,   target_column = NULL,   end_date = Sys.Date(),   span_unit = c(\"years\", \"months\", \"weeks\", \"days\"),   span_column_name = \"span\",   span_remainder_unit = NULL )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate time span between dates — timespan","text":"data input data frame linelist target_column string used specify name date column interest. values column type 'Date' ISO format (\"2024-01-31\"). end_date end date. can either character name another column type 'Date' input data vector Dates single Date value. also ISO format (\"2024-01-31\"). Default today's date Sys.Date(). span_unit string specifies units time span dates returned. possible units : 'years', 'months', 'weeks' 'days'. span_column_name string name new column used store calculated time span input data frame. span_remainder_unit string unit remainder time span calculated. May one \"months\", \"weeks\", \"days\". Remainders requested unit age return values 0. Default NULL decimal time span.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/timespan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate time span between dates — timespan","text":"input data frame one two additional columns: \"span\" name chosen user. contain calculated time span desired units. \"_remainder\": column number remaining days weeks months depending value 'span_remainder_unit' parameter. '' represents value 'span_column_name' argument.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/timespan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate time span between dates — timespan","text":"","code":"# In the below example, this function is used to calculate patient's age from # their dates of birth  # import the data, replace missing values with NA and convert date into ISO # format data <- readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")) data <- data %>%   replace_missing_values(target_columns = \"dateOfBirth\",                          na_strings     = \"-99\") %>%   standardize_dates(target_columns  = \"dateOfBirth\",                     error_tolerance = 0.0)  # calculate the age in 'years' and return the remainder in 'months' age <- timespan(   data                = data,   target_column       = \"dateOfBirth\",   end_date            = Sys.Date(),   span_unit           = \"years\",   span_column_name    = \"age_in_years\",   span_remainder_unit = \"months\" )"},{"path":[]},{"path":"https://epiverse-trace.github.io/cleanepi/news/index.html","id":"new-minor-features-1-0-2-9000","dir":"Changelog","previous_headings":"","what":"New minor features","title":"cleanepi 1.0.2.9000","text":"Added NEWS.md file track changes package.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/news/index.html","id":"bug-fixes-1-0-2-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"cleanepi 1.0.2.9000","text":"Fixed bug index empty rows returned print_report() remove_constants(). always returning number rows original data frame, instead index empty rows (#173, @Bisaloo). Fixed bug date guesser used standardize_dates() function. followings added corrected (#175, @Karim-Mane): allow quarter partial dates account odd cases parsing using {lubridate}","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/news/index.html","id":"enhancements-1-0-2-9000","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"cleanepi 1.0.2.9000","text":"Rendering report requires use {withr} package. Files generated process stored R temporary directory (#165, @Bisaloo). Simplification improvement code performance across several functions (#154, #156, #162, @Bisaloo). Make R version dependency explicit (#156, @Bisaloo). Replace base R pipe {tidyverse} pipe (#155, @Karim-Mane) Stop automatic conversion numeric values Date due unexpected results date_guess() function (#151, @Karim-Mane). Allow vector character na_strings argument replace_missing_values() (#180, Karim-Mane) Differentiate message sent duplicates found subject ids column vs duplicates across several columns (#180, Karim-Mane) Allow iterative constant data removal (#180, Karim-Mane) scan_data() now makes use date_guess() parse date characters lubridate::as_date() parse dates numeric. importantly, function now operates character columns .","code":""}]
