% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/correct_spelling_mistakes.R
\name{correct_spelling_mistakes}
\alias{correct_spelling_mistakes}
\title{Correct spelling mistakes detected with approximate string matching and
replaced with \code{wordlist}}
\usage{
correct_spelling_mistakes(
  data,
  target_columns,
  wordlist,
  max.distance = 1,
  confirm = rlang::is_interactive(),
  ...
)
}
\arguments{
\item{data}{The input \code{<data.frame>} or \code{<linelist>}}

\item{target_columns}{A \code{<vector>} of columns names to be converted from
numeric to date. When the input data is a \code{<linelist>} object, this
parameter can be set to \code{linelist_tags} to apply the conversion
exclusively to the tagged columns.}

\item{wordlist}{A \code{character} vector of words to match to cells in \code{data}.}

\item{max.distance}{An \code{integer} for the maximum distance allowed for a
detecting a spelling mistakes from the \code{wordlist}. The distance is the
generalized Levenshtein edit distance (see \code{\link[=adist]{adist()}}). Default is \code{1}.}

\item{confirm}{A \code{logical} boolean to determine whether to show the user a
menu of spelling corrections. If \code{TRUE} and using \R interactively then the
user will have the option to review the proposed spelling changes. (This
argument is useful for turning off the \code{\link[=menu]{menu()}} when
\code{\link[rlang:is_interactive]{rlang::is_interactive()}} returns \code{TRUE} but not wanting to prompt the user
e.g. \code{devtools::run_examples()}).}

\item{...}{\link{dots} Extra arguments to pass to \code{\link[=adist]{adist()}}.}
}
\value{
The corrected input date according to the user-specified \code{wordlist}.
}
\description{
Correct spelling mistakes detected with approximate string matching and
replaced with \code{wordlist}
}
\details{
When used interactively (see \code{\link[=interactive]{interactive()}}) the user is presented a menu
to ensure that the words detected using approximate string matching are not
false positives and the user can decided whether to proceed with the
spelling corrections. In non-interactive sessions all spelling mistakes
detected with approximate string matching are replaced by the \code{wordlist}
word.
}
\examples{
df <- data.frame(
  case_type = c("confirmed", "confermed", "probable", "susspected"),
  outcome = c("died", "recoverd", "did", "recovered")
)
df
correct_spelling_mistakes(
  data = df,
  target_columns = c("case_type", "outcome"),
  wordlist = c("confirmed", "probable", "suspected", "died", "recovered"),
  confirm = FALSE
)
}
