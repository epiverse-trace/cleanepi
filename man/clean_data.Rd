% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_data.R
\name{clean_data}
\alias{clean_data}
\title{Clean and standardize data}
\usage{
clean_data(
  data,
  params = list(keep = NULL, replace_missing_values = list(target_columns = NULL,
    na_strings = cleanepi::common_na_strings), remove_duplicates = list(target_columns =
    NULL, rm_empty_rows = TRUE, rm_empty_cols = TRUE, rm_constant_cols = TRUE),
    standardize_dates = list(target_columns = NULL, error_tolerance = 0.5, format = NULL,
    timeframe = NULL), standardize_subject_ids = list(id_col_name = "id", format = NULL,
    prefix = NULL, suffix = NULL, range = NULL), dictionary = NULL, to_numeric = NULL)
)
}
\arguments{
\item{data}{The input data frame or linelist}

\item{params}{A list of parameters that define what cleaning operations will
be applied on the input data. Possible values are:
\enumerate{
\item \code{keep}: A vector of column names to be kept as they appear in the
original data. All column names will be standardized if this is \code{NULL}
(the default value).
\item \code{replace_missing_values}: A list of parameters to be used when
replacing the missing values by \code{NA}. These parameters are the inputs
for the \code{replace_missing_values()} function.
\item \code{remove_duplicates}: A list of arguments that defines the list of
columns to be considered when looking for duplicates. It also contains
arguments that determine how constant rows and columns will be handled.
They are the input values for the \code{remove_duplicates()} function.
\item \code{standardize_date}: A list of parameters that will be used to
standardize the date values from the input data. They represent the
input values for the \code{standardize_dates()} function.
\item \code{standardize_subject_ids}: A list of parameters that are needed to
check the IDs that comply with the expect format. These arguments are
the input values of the \code{check_subject_ids()}.
\item \code{to_numeric}: a vector of column names. When provided, the values in
these columns will be converted into numeric.
\item \code{dictionary}: A data frame that will be used to substitute the
current values in the specified columns the those in the dictionary. It
is the main argument for the \code{clean_using_dictionary()} function.
}}
}
\value{
The cleaned input date according to the user-specified parameters.
This is associated with a data cleaning report that can be accessed using
\code{attr(cleaned_data, "report")}
}
\description{
Cleans up messy data frames by performing several operations.
These Include cleaning of column names, detecting and removing
duplicates, empty records and columns, constant columns, replacing missing
values by NA, converting character columns into dates when they contain a
certain number of date values, and detecting subject IDs with wrong
formats.
}
\examples{
keep <- NULL # column names standardization will be performed across
# all columns

# Parameters for substituting missing values with NA:
replace_missing_values <- list(target_columns = NULL, na_strings = "-99")

# Parameters for duplicates removal across all columns
# (target_columns = NULL)
remove_duplicates <- list(target_columns   = NULL,
                          rm_empty_rows    = TRUE,
                          rm_empty_cols    = TRUE,
                          rm_constant_cols = TRUE)

# Parameters for dates standardization
standardize_date <- list(target_columns  = NULL,
                         error_tolerance = 0.5,
                         format          = NULL,
                         timeframe       = as.Date(c("1973-05-29",
                                                     "2023-05-29")))

# Parameters for subject IDs standardization
standardize_subject_ids <- list(id_col_name = "study_id",
                                format      = NULL,
                                prefix      = "PS",
                                suffix      = "P2",
                                range       = c(1, 100))

# to_numeric = "sex" the 'sex' column will be converted into numeric

# dictionary = NULL the dictionary-based cleaning will not be performed here

cleaned_data <- clean_data(
  data   = readRDS(system.file("extdata", "test_df.RDS",
                               package = "cleanepi")),
  params = list(
    keep                    = NULL,
    replace_missing_values  = replace_missing_values,
    remove_duplicates       = remove_duplicates,
    standardize_date        = standardize_date,
    standardize_subject_ids = standardize_subject_ids,
    to_numeric              = "sex",
    dictionary              = NULL
  )
)

}
