% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calcualte_age.R
\name{calculate_age}
\alias{calculate_age}
\title{Calculate age from a specified date column}
\usage{
calculate_age(
  data,
  target_column = NULL,
  end_date = Sys.Date(),
  age_in = c("years", "months", "weeks", "days"),
  age_column_name = sprintf("age_in_\%s", age_in),
  age_remainder_unit = c("months", "weeks", "days")
)
}
\arguments{
\item{data}{A data frame with at least one date column.}

\item{target_column}{A string specifying the name of the date column of
interest.}

\item{end_date}{An end date. This should be in the format
\verb{\%Y-\%m-\%d} ("2024-12-31" for 31st of December 2024). Otherwise, use the
\code{as.Date()} function and specify the format of the end date. The default
is today's date \code{Sys.Date()}.}

\item{age_in}{A string that specifies whether to return the age in 'years',
'months', 'weeks' or 'days'. The default is in 'years'.}

\item{age_column_name}{A string for the name of the new column to be used to
store the calculated age in the input data.frame.}

\item{age_remainder_unit}{A string for the unit in which the remainder of the
age should be calculated. May be one of "months", "weeks", and "days".
Remainders requested in the same unit as the age will return values of 0.}
}
\value{
The input data frame with 2 additional columns:
\enumerate{
\item "age_in_years",  "age_in_months",  "age_in_weeks", or
"age_in_days" depending on the value of the 'age_in' parameter.
\item "remainder_*": A column with the number of the remaining
days (remainder_days) or weeks (remainder_weeks) or months
(remainder_months) depending on the value of the 'age_remainder_unit'
parameter.
}
}
\description{
Calculate age from a specified date column
}
\examples{
data <- readRDS(system.file("extdata", "test_df.RDS", package = "cleanepi"))

# The 'dateOfBirth' column contains missing values recoded as "-99". let's
# replace them with NA
data <- replace_missing_values(data           = data,
                               target_columns = "dateOfBirth",
                               na_strings     = "-99")

# the calculate_age() function expects the date values to be given in ISO.
# Let's convert the 'dateOfBirth' column into ISO date
data <- standardize_dates(data            = data,
                          target_columns  = "dateOfBirth",
                          error_tolerance = 0.0)

# calculate the age 'years' and return the remainder in 'months'
age <- calculate_age(
  data               = data,
  target_column      = "dateOfBirth",
  end_date           = Sys.Date(),
  age_in             = "years",
  age_remainder_unit = "months"
)

# The operations above can be written in a pipe-formatted way:
data <- readRDS(system.file("extdata", "test_df.RDS", package = "cleanepi"))
age  <- data |>
  replace_missing_values(target_columns = "dateOfBirth",
                         na_strings     = "-99") |>
  standardize_dates(target_columns  = "dateOfBirth",
                    error_tolerance = 0.0) |>
  calculate_age(target_column      = "dateOfBirth",
                end_date           = Sys.Date(),
                age_in             = "years",
                age_remainder_unit = "months")

}
